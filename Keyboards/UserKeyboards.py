

import aiogram.types

from Keyboards.InlineConsts import InlineConstructor
from Keyboards.ReplyConsts import DefaultConstructor


class InlineButtons(InlineConstructor):

    @staticmethod
    def start_kb__not_sub() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è \U00002705",
                 "url":"https://t.me/offsidecard"}]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def start_kb__sub() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1,1]
        btns = [{"text": "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                 "callback_data": "info"},
                {"text": "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def lucky_strike_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1]
        btns = [{"text": "‚öΩ –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä",
                 "callback_data": "do_strike"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def do_strike_kb(tasks: list) -> aiogram.types.InlineKeyboardMarkup:


        schema = []
        btns = []

        if "b3" in tasks:
            schema.append(1)
            btns.append({"text": "üíµ –ö—É–ø–∏—Ç—å 3 —É–¥–∞—Ä–∞",
                 "callback_data": "4"})
        if "no_b3" in tasks:
            schema.append(1)
            btns.append({"text": "‚öΩ –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä",
                         "callback_data": "do_strike"})
        if "back" in tasks:
            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "games"})
        if "take_card" in tasks:
            schema.append(1)
            btns.append({"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                         "callback_data": "get_new_cards"})

        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def rate_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1,1]
        btns = [{"text": "üÉè –†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫",
                 "callback_data": "rate_card"},
                {"text": "‚öΩ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
                 "callback_data": "rate_pen"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def trade_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1]
        btns = [{"text": "üÉè –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞",
                 "callback_data": "chan_by_0"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                 "callback_data": "trade_canc"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def get_second_user_for_offer_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def pen_canc_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def time_events_checker_2_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1,1]
        btns = [{"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                 "callback_data": "0"},
                {"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def time_events_checker_kb(res=True) -> aiogram.types.InlineKeyboardMarkup:

        if res:
            schema = [1,1]
            btns = [{"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                     "callback_data": "back"},
                    {"text": "‚öΩ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
                     "callback_data": "rate_pen"}
                    ]
        else:
            schema = [1]
            btns = [{"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                     "callback_data": "back"}
                    ]


        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def pen_start_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [3]
        btns = [{"text": "1‚É£",
                 "callback_data": "pen_1"},
                {"text": "2‚É£",
                 "callback_data": "pen_2"},
                {"text": "3‚É£",
                 "callback_data": "pen_3"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def pen_else_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [3]
        btns = [{"text": "1‚É£",
                 "callback_data": "pen_1"},
                {"text": "2‚É£",
                 "callback_data": "pen_2"},
                {"text": "3‚É£",
                 "callback_data": "pen_3"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def pen_finished_0_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1,1]
        btns = [{"text": "‚öΩ –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞",
                 "callback_data": "penalti"},
                {"text": "üè≥ –ù–∏—á—å—è",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def pen_finished_1_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1]
        btns = [{"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                 "callback_data": "back"},
                {"text": "‚öΩ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
                 "callback_data": "rate_pen"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def insert_card_to_offer_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1]
        btns = [{"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                 "callback_data": "trade"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                 "callback_data": "trade_canc"},
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def get_show_new_cards_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                 "callback_data": "trade"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def back_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def back_to_getcar_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [{"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "getcar"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def show_card_one_by_one_kb(tasks: list, add_data: dict) -> aiogram.types.InlineKeyboardMarkup:

        schema = []
        btns = []

        if "sort_button" in tasks:
            schema.append(1)
            btns.append(add_data['sort_button'])

        if "–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞" in tasks:
            schema.append(1)
            btns.append(
                {"text": "–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞",
                 "callback_data": add_data['–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞']})


        if "not_chan" in tasks:
            schema.append(5)
            btns.append({"text": "<<",
                         "callback_data": add_data['<<<']})
            btns.append({"text": "<",
                         "callback_data": add_data['<<']})
            btns.append(
                {"text": ">",
                 "callback_data": add_data['>>']}
            )
            btns.append(
                {"text": ">>",
                 "callback_data": add_data['>>>']}
            )

        if "num1" in tasks:

            schema.append(1)
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )

        if "num1_chan" in tasks:
            schema.append(1)
            btns.append({"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                         "callback_data": "trade_canc"})

        if "num1_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})


        if "num0" in tasks:

            schema.append(3)
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )
            btns.append(
                {"text": ">",
                 "callback_data": add_data['>>']}
            )
            btns.append(
                {"text": ">>",
                 "callback_data": add_data['>>>']}
            )

        if "num0_chan" in tasks:
            schema.append(1)
            btns.append({"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                         "callback_data": "trade_canc"})

        if "num0_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        if "num_len-1" in tasks:
            schema.append(3)
            btns.append({"text": "<<",
                         "callback_data": add_data['<<<']})
            btns.append({"text": "<",
                         "callback_data": add_data['<<']})
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )

        if "num_len-1_chan" in tasks:
            schema.append(1)
            btns.append({"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                         "callback_data": "trade_canc"})

        if "num_len-1_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        if "num_else" in tasks:
            schema.append(5)
            btns.append({"text": "<<",
                         "callback_data": add_data['<<<']})
            btns.append({"text": "<",
                         "callback_data": add_data['<<']})
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )
            btns.append(
                {"text": ">",
                 "callback_data": add_data['>>']}
            )
            btns.append(
                {"text": ">>",
                 "callback_data": add_data['>>>']}
            )

        if "num_else_chan" in tasks:
            schema.append(1)
            btns.append({"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                         "callback_data": "trade_canc"})

        if "num_else_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})


        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def show_card_by_rare_kb(tasks: list, add_data: dict) -> aiogram.types.InlineKeyboardMarkup:

        schema = []
        btns = []


        if "num1" in tasks:
            schema.append(1)
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )

        if "num1_chan" in tasks:
            schema.append(1)
            btns.append({"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω",
                         "callback_data": "trade_canc"})

        if "num1_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        if "num0" in tasks:
            schema.append(3)
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )
            btns.append(
                {"text": ">",
                 "callback_data": add_data['>>']}
            )
            btns.append(
                {"text": ">>",
                 "callback_data": add_data['>>>']}
            )

        if "num0_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        if "num_len-1" in tasks:
            schema.append(3)
            btns.append({"text": "<<",
                         "callback_data": add_data['<<<']})
            btns.append({"text": "<",
                         "callback_data": add_data['<<']})
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )


        if "num_len-1_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        if "num_else" in tasks:
            schema.append(5)
            btns.append({"text": "<<",
                         "callback_data": add_data['<<<']})
            btns.append({"text": "<",
                         "callback_data": add_data['<<']})
            btns.append(
                {"text": add_data["num1_text"],
                 "callback_data": add_data["num1_data"]}
            )
            btns.append(
                {"text": ">",
                 "callback_data": add_data['>>']}
            )
            btns.append(
                {"text": ">>",
                 "callback_data": add_data['>>>']}
            )

        if "num_else_not_chan" in tasks:

            schema.append(1)
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                         "callback_data": "my_collection"})

        return InlineButtons._create_kb(btns, schema)
    @staticmethod
    def take_card_kb(have_cards=False) -> aiogram.types.InlineKeyboardMarkup:
        schema = []
        btns = []

        if have_cards:
            schema.append(1)
            schema.append(1)
            schema.append(1)
            btns.append({"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                     "callback_data": "getcar"})
            btns.append({"text": "\U0001F4F2 –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º",
                     "callback_data": "one_by_0"})
            btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                     "callback_data": "back"})

        else:
            schema = [1, 1]
            btns = [{"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                     "callback_data": "getcar"},
                    {"text": "‚è™ –ù–∞–∑–∞–¥",
                     "callback_data": "back"}
                    ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def games_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1, 1]
        btns = [{"text": "‚öΩ –ü–µ–Ω–∞–ª—å—Ç–∏",
                 "callback_data": "penalti"},
                {"text": "‚òò –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä",
                 "callback_data": "lucky_strike"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def info_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1,1,1]
        btns = [{"text": "üÉè –û –∫–∞—Ä—Ç–∞—Ö",
                 "callback_data": "card_info"},
                {"text": "‚öΩ –û –ø–µ–Ω–∞–ª—å—Ç–∏",
                 "callback_data": "penalti_info"},
                {"text": "‚òò –û–± —É–¥–∞—á–Ω–æ–º —É–¥–∞—Ä–µ",
                 "callback_data": "strike_info"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "menu"},
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def call_trade_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1, ]
        btns = [{"text": "üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏",
                 "callback_data": "chan_by_0"},
                {"text": "üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def get_buy_message_kb(redirect_uri) -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1,1]
        btns = [{"text": "–û–ø–ª–∞—Ç–∏—Ç—å",
                 "url": redirect_uri},
                {"text": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                 "callback_data": "check_pay"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def card_shop_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1]
        btns = [
                {"text": "üõç –ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫",
                 "callback_data": "store"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def user_game_kb(user_in_game: bool) -> aiogram.types.InlineKeyboardMarkup:
        if not user_in_game:
            schema = [1, 1]
            btns = [
                {"text": "‚úÖ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
                 "callback_data": "pen_start"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                 "callback_data": "pen_canc"}
            ]
        else:
            schema = [1, 1]
            btns = [
                {"text": "–ü–ï–ù–ê–õ–¨–¢–ò‚öΩ",
                 "callback_data": "penalti"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"}
            ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def back_back_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [
            {"text": "‚è™ –ù–∞–∑–∞–¥",
             "callback_data": "back"}
        ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def mini_games_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [
            {"text": "üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
             "callback_data": "games"}
        ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def get_cards_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1]
        btns = [
            {"text": "\U0001F0CF –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ \U0001F0CF",
             "callback_data": "get_new_cards"}
        ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def show_new_card_kb(card_info=True) -> aiogram.types.InlineKeyboardMarkup:
        if card_info:
            schema = [1]
            btns = [
                {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                 "callback_data": "back"}
            ]
        else:
            schema = [1]
            btns = [
                {"text": "–î–∞–ª—å—à–µ \U0001F449",
                 "callback_data": "slide_bought_cards"}
            ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def getcar_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1, 1, 1]
        btns = [{"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É",
                 "callback_data": "0"},
                {"text": "üõç –ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫",
                 "callback_data": "store"},
                {"text": "üßë‚Äçüíª –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥",
                 "callback_data": "input"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"},
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def store_kb() -> aiogram.types.InlineKeyboardMarkup:
        schema = [1, 1, 1, 1]
        btns = [{"text": "üíµ –ö—É–ø–∏—Ç—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É",
                 "callback_data": "1"},
                {"text": "üíµ –ö—É–ø–∏—Ç—å —Ç—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏",
                 "callback_data": "2"},
                {"text": "üíµ –ö—É–ø–∏—Ç—å –ø—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫",
                 "callback_data": "3"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"},
                ]
        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def rare_mode_kb(buttons: list) -> aiogram.types.InlineKeyboardMarkup:

        schema = []
        btns = []

        for button in buttons:
            schema.append(1)
            btns.append(button)

        schema.append(1)
        btns.append({"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"})

        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def collection_kb() -> aiogram.types.InlineKeyboardMarkup:

        schema = [1,1,1,1]
        btns = [{"text": "–í—Å–µ –∫–∞—Ä—Ç—ã",
                 "callback_data": "one_by_0"},
                {"text": "–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏",
                 "callback_data": "rare_mode"},
                {"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–æ–º",
                 "callback_data": "coll"},
                {"text": "‚è™ –ù–∞–∑–∞–¥",
                 "callback_data": "back"},
                ]

        return InlineButtons._create_kb(btns, schema)

    @staticmethod
    def back_lk_kb(admin_status=False) -> aiogram.types.InlineKeyboardMarkup:

        if admin_status:
            schema = [2,2,1, 1, 1]
            btns = [{"text": "üß≥ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è",
                     "callback_data": "my_collection"},
                    {"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                     "callback_data": "getcar"},
                    {"text": "üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏",
                     "callback_data": "chan_by_0"},
                    {"text": "üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                     "callback_data": "rate"},
                    {"text": "üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
                     "callback_data": "games"},
                    {"text": "–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å",
                     "callback_data": "admin"},
                    {"text": "‚è™ –ù–∞–∑–∞–¥",
                     "callback_data": "menu"},
                    ]
        else:
            schema = [2,2, 1, 1]
            btns = [{"text": "üß≥ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è",
                     "callback_data": "my_collection"},
                    {"text": "üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É",
                     "callback_data": "getcar"},
                    {"text": "üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏",
                     "callback_data": "chan_by_0"},
                    {"text": "üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                     "callback_data": "rate"},
                    {"text": "üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã",
                     "callback_data": "games"},
                    {"text": "‚è™ –ù–∞–∑–∞–¥",
                     "callback_data": "menu"},
                    ]
        return InlineButtons._create_kb(btns, schema)
