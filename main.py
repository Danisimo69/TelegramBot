import time

import cherrypy
import threading
import telebot
from telebot import types as tp
from telebot import apihelper

import config as cfg
import penalti as pnt
import payment as pt
import admin as adm
import lucky_strike as ls
import timers as tm

# –≤–æ—Ç —Ç—É—Ç –≤–∞—à ip –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞
WEBHOOK_HOST = ''
WEBHOOK_PORT = 443
WEBHOOK_LISTEN = '0.0.0.0'

WEBHOOK_SSL_CERT = './webhook_cert.pem'
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % cfg.token

# –ò–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
CHANNEL_ID = ""

bot = telebot.TeleBot(cfg.token)
bot.remove_webhook()
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))


class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
                'content-type' in cherrypy.request.headers and \
                cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)


# –∏–∑–º–µ–Ω–∏–ª —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
def is_subscribed(USER_ID):
    try:
        result = str(bot.get_chat_member(CHANNEL_ID, USER_ID))
        if 'left' not in result:
            return True
        else:
            return False
    except apihelper.ApiException as error:
        print(error)
        return True


# —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–∂–µ –±—ã–ª–∞ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞
def search_user_by_username(user_name, tele_id):
    username = user_name.replace("@", "")
    user_list = cfg.select_all_users()
    for user in user_list:
        if username == bot.get_chat_member(CHANNEL_ID, user[0]).user.username and user[0] != tele_id:
            return user[0]
    return -1


# –∑–¥–µ—Å—å —Ç–æ–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
def get_username_by_id(tele_id):
    user = bot.get_chat_member(CHANNEL_ID, tele_id)
    username = user.user.username
    return str(username)


# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Å–∞–º–æ–º –±–æ—Ç–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
def check_finish_game_penalti(call: tp.CallbackQuery, res: list, scores: list):
    finished = pnt.is_finished(call.message.chat.id)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if finished == -1:
        old_markup = tp.InlineKeyboardMarkup()
        old_markup.add(tp.InlineKeyboardButton(
            text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
        error_str = "–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–∞–Ω—Å –±—ã –∑–∞–≤–µ—Ä—à–µ–Ω"
        msg = bot.send_message(chat_id=call.message.chat.id,
                               text=error_str, reply_markup=old_markup)
        cfg.insert_lk_message_id(msg.message_id, msg.chat.id)
        msg = bot.send_message(chat_id=pnt.get_second_user(
            call.message.chat.id), text=error_str, reply_markup=old_markup)
        cfg.insert_lk_message_id(msg.message_id, msg.chat.id)
        pnt.delete_game(call.message.chat.id)
        return True
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    if finished:
        game_res = pnt.finish_game(call.message.chat.id)
        if game_res[0] == 0:
            markup = tp.InlineKeyboardMarkup()
            markup.add(tp.InlineKeyboardButton(
                text="‚öΩÔ∏è –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞", callback_data="penalti"))
            markup.add(tp.InlineKeyboardButton(
                text="üè≥Ô∏è –ù–∏—á—å—è", callback_data="new_lk"))
            draw_str = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{get_username_by_id(res[1])}:\n{scores[0]}\n" \
                       f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{get_username_by_id(res[2])}:\n{scores[1]}\n" \
                       f"üèÜ –í—ã –∑–∞–±–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤! " \
                       f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫—É –∏–ª–∏ –∂–µ –Ω–∏—á—å—é, –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏!"
            msg = bot.send_message(res[1], text=draw_str, reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, game_res[1])
            msg = bot.send_message(res[2], text=draw_str, reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, game_res[2])
        else:
            markup = tp.InlineKeyboardMarkup()
            markup.add(tp.InlineKeyboardButton(
                text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
            markup.add(tp.InlineKeyboardButton(
                text="‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏", callback_data="rate_pen"))
            fin_str = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{get_username_by_id(res[1])}:\n{scores[0]}\n" \
                      f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{get_username_by_id(res[2])}:\n{scores[1]}\n" \
                      f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - @{get_username_by_id(game_res[1])}"
            msg = bot.send_message(
                game_res[1], text=fin_str, reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, game_res[1])
            msg = bot.send_message(
                game_res[2], text=fin_str, reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, game_res[2])
        pnt.delete_game(call.message.chat.id)
        return True
    return False


# –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (destroy_penalti_game —Ä–∞–Ω—å—à–µ)
def time_events_checker():
    while True:
        games_list = pnt.select_all_games()
        if games_list is not None:
            for game in games_list:
                result = pnt.destroy_game(game[0])
                if result[0] != 0:
                    markup = tp.InlineKeyboardMarkup()
                    markup.add(tp.InlineKeyboardButton(
                        text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
                    if result[2]:
                        markup.add(tp.InlineKeyboardButton(
                            text="‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏", callback_data="rate_pen"))
                        msg = bot.send_message(result[0],
                                               "–ò–≥—Ä–æ–∫ - @" + get_username_by_id(
                                                   result[1]) + " —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                               reply_markup=markup)
                        cfg.insert_lk_message_id(msg.message_id, result[0])
                        msg = bot.send_message(result[1],
                                               "–¢–µ–±—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –≤ –∏–≥—Ä–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ",
                                               reply_markup=markup)
                        cfg.insert_lk_message_id(msg.message_id, result[1])
                    else:
                        msg = bot.send_message(result[0],
                                               "–ú–∞—Ç—á –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è üè≥Ô∏è",
                                               reply_markup=markup)
                        cfg.insert_lk_message_id(msg.message_id, result[0])
                        msg = bot.send_message(result[1],
                                               "–ú–∞—Ç—á –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è üè≥Ô∏è",
                                               reply_markup=markup)
                        cfg.insert_lk_message_id(msg.message_id, result[1])
        time.sleep(10)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–æ–≤ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        user_list = cfg.get_users_id_for_free_card()
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="0"))
        markup.add(tp.InlineKeyboardButton(
            text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
        for user_id in user_list:
            if is_subscribed(user_id):
                try:
                    msg = bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É! üéÅ",
                                           reply_markup=markup)
                    cfg.insert_lk_message_id(msg.message_id, user_id)
                    cfg.set_get_msg(user_id, 1)
                except apihelper.ApiException as e:
                    print(e)
        tm.unban_users()
        ls.give_free_strikes()
        time.sleep(30)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º
def go_to_lk_message(CHAT_ID):
    user = cfg.search_user_in_db(CHAT_ID)
    cfg.calc_card_rating(CHAT_ID)
    cfg.cancel_trade(CHAT_ID)
    markup = tp.InlineKeyboardMarkup()
    # –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É)
    coll_btn = tp.InlineKeyboardButton(
        text="üß≥ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="one_by_0")
    card_btn = tp.InlineKeyboardButton(
        text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="getcar")
    markup.row(card_btn, coll_btn)
    # –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    change_btn = tp.InlineKeyboardButton(
        text="üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏", callback_data="chan_by_0")
    rate_btn = tp.InlineKeyboardButton(
        text="üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rate")
    markup.row(change_btn, rate_btn)
    # —Ä—è–¥ —Å –º–∏–Ω–∏-–∏–≥—Ä–æ–π
    markup.row(tp.InlineKeyboardButton(
        text="üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="games"))
    if cfg.is_admin(CHAT_ID):
        markup.row(tp.InlineKeyboardButton(
            text="–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", callback_data="admin"))
    # —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    markup.row(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="menu"))
    # —Å—Ç—Ä–æ—á–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
    stat_str = "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\nüÉè –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: " + str(user[1]) + "\n" \
                                                                                        "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:" + str(
        user[2]) + "\n\n" \
                   "‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ü–µ–Ω–∞–ª—å—Ç–∏: " + str(user[3])
    msg = bot.send_message(chat_id=CHAT_ID, text=stat_str, reply_markup=markup)
    cfg.insert_lk_message_id(msg.message_id, CHAT_ID)


# —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start_message(message):
    cfg.clear_non_active_users()
    # –∏–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∂–µ
    if not is_subscribed(message.from_user.id):
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è \U00002705", url="https://t.me/offsidecard"))
        bot.send_message(message.from_user.id,
                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                         "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @offsidecard\n"
                         "2Ô∏è‚É£ –ù–∞–∂–∞—Ç—å –Ω–∞ /start",
                         reply_markup=markup)
    elif not tm.check_spam(message.from_user.id):
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
        markup.add(tp.InlineKeyboardButton(
            text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="back"))
        cfg.place_user_in_bd(message.from_user.id)
        msg = bot.send_message(message.from_user.id,
                               "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                               "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                               "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                               "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                               "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                               "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                               "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: *¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                               "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                               reply_markup=markup, parse_mode='Markdown')
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)


# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "menu")
def back_to_menu(call):
    cfg.clear_non_active_users()
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    markup.add(tp.InlineKeyboardButton(
        text="üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="back"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                               "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                               "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                               "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                               "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                               "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                               "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: *¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                               "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                          reply_markup=markup, parse_mode='Markdown')


# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
@bot.callback_query_handler(func=lambda call: call.data == "info")
def answer_info_callback(call):
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üÉè –û –∫–∞—Ä—Ç–∞—Ö", callback_data="card_info"))
    markup.add(tp.InlineKeyboardButton(
        text="‚öΩÔ∏è –û –ø–µ–Ω–∞–ª—å—Ç–∏", callback_data="penalti_info"))
    markup.add(tp.InlineKeyboardButton(
        text="‚òòÔ∏è –û–± —É–¥–∞—á–Ω–æ–º —É–¥–∞—Ä–µ", callback_data="strike_info"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="menu"))
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    bot.edit_message_text(message_id=msg_id, chat_id=call.message.chat.id,
                          text="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç", reply_markup=markup)


# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: "_info" in call.data)
def answer_questions(call):
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="menu"))
    if call.data == "card_info":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id,
                              text="–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ç–≤–æ–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
                                   "1) –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 1000 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "2) –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 500 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "3) –≠–ø–∏—á–µ—Å–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 250 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "4) –ù–µ–æ–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 100 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "5) –û–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 50 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n",
                              reply_markup=markup)
    if call.data == "penalti_info":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id,
                              text="–ò–≥—Ä–∞ –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ OFFSIDE, "
                                   "–≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–±–∏–≤–∞—Ç—å –∏ –æ—Ç–±–∏–≤–∞—Ç—å –º—è—á–∏.\n\n"
                                   "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                   "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                   "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚öΩÔ∏è –ü–µ–Ω–∞–ª—å—Ç–∏¬ª\n"
                                   "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å.\n"
                                   "–ò–≥—Ä–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –¥–µ–ª–∞—Ç—å —É–¥–∞—Ä—ã. "
                                   "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –≤ —Ä–æ–ª–∏ –≤—Ä–∞—Ç–∞—Ä—è, –µ–≥–æ –∑–∞–¥–∞—á–∞: —Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—É—é —Ü–∏—Ñ—Ä—É,"
                                   " —á—Ç–æ–±—ã –ø—Ä—ã–≥–Ω—É—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª –∏ –æ—Ç—Ä–∞–∑–∏—Ç—å —É–¥–∞—Ä. "
                                   "–î–∞–ª–µ–µ –≤—ã –º–µ–Ω—è–µ—Ç–µ—Å—å –º–µ—Å—Ç–∞–º–∏, —Ç–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—è—Ç—å —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. "
                                   "–í –∏—Ç–æ–≥–µ, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º—è—á–µ–π. "
                                   "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∏—á—å—è.\n\n"
                                   "–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è  +25 –±–∞–ª–ª–æ–≤, –∞ –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è -25 –±–∞–ª–ª–æ–≤. "
                                   "–í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –¥–∞–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 100. "
                                   "–ó–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∏—á—å–µ–π —Ä–µ–π—Ç–∏–Ω–≥ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.",
                              reply_markup=markup)
    if call.data == "strike_info":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id,
                              text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                   "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                   "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä¬ª\n"
                                   "3. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚öΩÔ∏è –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä¬ª\n\n"
                                   "‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º.\n"
                                   "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.\n"
                                   "–ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - –ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.\n"
                                   "–í –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                                   "–ï—Å–ª–∏ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ–∑–µ—Ç –∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —É–¥–∞—Ä–æ–≤ –ø–æ –≤–æ—Ä–æ—Ç–∞–º - "
                                   "–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.",
                              reply_markup=markup)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'a –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "back")
def return_to_lk(call):
    user = cfg.search_user_in_db(call.message.chat.id)
    cfg.calc_card_rating(call.message.chat.id)
    cfg.cancel_trade(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    # –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É)
    coll_btn = tp.InlineKeyboardButton(
        text="üß≥ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="one_by_0")
    card_btn = tp.InlineKeyboardButton(
        text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="getcar")
    markup.row(card_btn, coll_btn)
    # –≤—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    change_btn = tp.InlineKeyboardButton(
        text="üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏", callback_data="chan_by_0")
    rate_btn = tp.InlineKeyboardButton(
        text="üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="rate")
    markup.row(change_btn, rate_btn)
    # —Ä—è–¥ —Å –º–∏–Ω–∏-–∏–≥—Ä–æ–π
    markup.row(tp.InlineKeyboardButton(
        text="üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="games"))
    if cfg.is_admin(call.message.chat.id):
        markup.row(tp.InlineKeyboardButton(
            text="–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", callback_data="admin"))
    # —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    markup.row(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="menu"))
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    # —Å—Ç—Ä–æ—á–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
    stat_str = "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\nüÉè –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: " + str(user[1]) + "\n" \
                                                                                        "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:" + str(
        user[2]) + "\n\n" \
                   "‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ü–µ–Ω–∞–ª—å—Ç–∏: " + str(user[3])
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=msg_id, text=stat_str, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "rate")
def get_player_rating(call):
    cfg.calc_card_rating(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üÉè –†–µ–π—Ç–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="rate_card"))
    markup.add(tp.InlineKeyboardButton(
        text="‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ü–µ–Ω–∞–ª—å—Ç–∏", callback_data="rate_pen"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üèÜ–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: "rate_" in call.data)
def get_top_places(call):
    num = 1
    ans_str = ""
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    places = cfg.get_user_places(call.message.chat.id)
    if call.data == "rate_card":
        card_top = cfg.get_top_places()[0]
        for user in card_top:
            ans_str += str(num) + ". @" + get_username_by_id(user[0]) \
                + " - " + str(user[2]) + "\n"
            num += 1
        if not cfg.user_in_top_ten(call.message.chat.id)[0]:
            user = cfg.search_user_in_db(call.message.chat.id)
            ans_str += "\n" + str(places[0]) + ". @" \
                       + get_username_by_id(call.message.chat.id) + \
                " - " + str(user[2])
    if call.data == "rate_pen":
        penalti_top = cfg.get_top_places()[1]
        for user in penalti_top:
            ans_str += str(num) + ". @" + get_username_by_id(user[0]) \
                + " - " + str(user[3]) + "\n"
            num += 1
        if not cfg.user_in_top_ten(call.message.chat.id)[1]:
            user = cfg.search_user_in_db(call.message.chat.id)
            ans_str += "\n" + str(places[1]) + ". @" \
                       + get_username_by_id(call.message.chat.id) + \
                " - " + str(user[3])
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=ans_str, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "coll")
def get_collection(call):
    user_cards = cfg.get_user_card_list(call.message.chat.id)
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    if user_cards is None:
        markup.add(tp.InlineKeyboardButton(
            text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="getcar"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id,
                              text="–ü–æ–∫–∞ —á—Ç–æ –≤–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞", reply_markup=markup)
    else:
        markup.add(tp.InlineKeyboardButton(
            text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="getcar"))
        markup.add(tp.InlineKeyboardButton(
            text="\U0001F4F2 –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º", callback_data="one_by_0"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        ans_str = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: \n\n"
        num = 1
        cfg.calc_card_rating(call.message.chat.id)
        for i in range(0, len(user_cards[0])):
            ans_str += str(num) + ". " + str(user_cards[0][i][2]) + " (" + str(user_cards[0][i][3]) + ") - " + \
                str(user_cards[1][i].num) + " —à—Ç.\n"
            num += 1
        msg = bot.send_message(chat_id=call.message.chat.id,
                               text=ans_str, reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)


# –≤—ã–∑–æ–≤ –º–∏–Ω–∏-–∏–≥—Ä
@bot.callback_query_handler(func=lambda call: call.data == "games")
def get_mini_games(call):
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="‚öΩÔ∏è –ü–µ–Ω–∞–ª—å—Ç–∏", callback_data="penalti"))
    markup.add(tp.InlineKeyboardButton(
        text="‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä", callback_data="lucky_strike"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                          text="–¢—É—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∏–Ω–∏-–∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –∏–∑ –≤–∞—Å –ª—É—á—à–∏–πü•á",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "penalti")
def penalti_message(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    if not pnt.user_in_game(call.message.from_user.id):
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
                              reply_markup=markup)
        bot.register_next_step_handler(call.message, get_username_for_pen)
    else:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–µ, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é",
                              reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "lucky_strike")
def lucky_strike(call):
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="‚öΩÔ∏è –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä", callback_data="do_strike"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="games"))
    msg = bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text="‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º. "
                                     "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.–ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - "
                                     "–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
                                reply_markup=markup)
    cfg.insert_lk_message_id(msg.message_id, call.from_user.id)


# —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä
@bot.callback_query_handler(func=lambda call: call.data == "do_strike")
def do_strike(call):
    markup = tp.InlineKeyboardMarkup()
    free_info = ls.check_free_strike(call.from_user.id)
    purchased = ls.check_purchased_strikes(call.from_user.id)
    if free_info[0] or purchased[0]:
        msg = bot.send_dice(call.from_user.id, '‚öΩÔ∏è')
        if msg.dice.value < 3:
            ls.update_user_strikes(call.from_user.id, -1)
            if not purchased[0] or purchased[1] == 1:
                msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"
                markup.add(tp.InlineKeyboardButton(
                    text="üíµ –ö—É–ø–∏—Ç—å 3 —É–¥–∞—Ä–∞", callback_data="4"))
            else:
                msg_text = f"‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ - {purchased[1] - 1}"
                markup.add(tp.InlineKeyboardButton(
                    text="‚öΩÔ∏è –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä", callback_data="do_strike"))
            markup.add(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="games"))
        else:
            ls.update_user_strikes(call.from_user.id, -1)
            cfg.add_cards_to_user(ls.get_random_card(1), call.message.chat.id)
            msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–ª –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É!"
            markup.add(tp.InlineKeyboardButton(
                text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="get_new_cards"))
        msg = bot.send_message(
            call.from_user.id, msg_text, reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, call.from_user.id)
    elif not purchased[0]:
        msg_text = f"–¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–±–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!\n" \
                   f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {free_info[1].split(':')[0]}—á {free_info[1].split(':')[1]}–º–∏–Ω" \
                   f" ‚è± –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"
        markup.add(tp.InlineKeyboardButton(
            text="üíµ –ö—É–ø–∏—Ç—å 3 —É–¥–∞—Ä–∞", callback_data="4"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="games"))
        bot.edit_message_text(text=msg_text, chat_id=call.from_user.id,
                              message_id=call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "cont_off")
def continue_offer(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg_id,
                          text="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å—Å—è")
    bot.register_next_step_handler(call.message, get_offer_to_user)


# –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏—Ö –ø–æ–∫—É–ø–∫–∞ (—Ç–æ–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞)
@bot.callback_query_handler(func=lambda call: call.data == "getcar")
def get_cards(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    product_str = "üÉè –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, —Ç–æ —Ç—ã –ø–æ–ø–∞–ª –∫—É–¥–∞ –Ω–∞–¥–æ!\n\n" \
                  "–†–∞–∑ –≤ 24 —á–∞—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, " \
                  "–Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö" \
                  " –∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç üõç"
    markup.add(tp.InlineKeyboardButton(
        text="üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="0"))
    markup.add(tp.InlineKeyboardButton(
        text="üõç –ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="store"))
    markup.add(tp.InlineKeyboardButton(
        text="üßë‚Äçüíª –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="input"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                          text=product_str, reply_markup=markup)


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
@bot.callback_query_handler(func=lambda call: call.data == "store")
def get_card_shop(call):
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üíµ –ö—É–ø–∏—Ç—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="1"))
    markup.add(tp.InlineKeyboardButton(
        text="üíµ –ö—É–ø–∏—Ç—å —Ç—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="2"))
    markup.add(tp.InlineKeyboardButton(
        text="üíµ –ö—É–ø–∏—Ç—å –ø—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="3"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="getcar"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="üõç –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∫–∞—Ä—Ç, —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
                               "üí∞ –û–¥–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - 65 —Ä—É–±–ª–µ–π\n"
                               "üí∞ –¢—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ - 125 —Ä—É–±–ª–µ–π\n"
                               "üí∞ –ü—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - 185 —Ä—É–±–ª–µ–π",
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "input")
def wait_promo(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="getcar"))
    bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µ",
                          call.message.chat.id, call.message.message_id)
    bot.register_next_step_handler(call.message, check_promocode)


# –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–¥–Ω–∞ –∑–∞ –æ–¥–Ω–æ–π (—Ö–µ–Ω–¥–ª–µ—Ä —á–∞—Å—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω, –≤—Å—Ç–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ) // –±—ã–ª —É–ø—Ä–æ—â–µ–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥
# –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
# –ø–æ—ç—Ç–æ–º—É —è —É–∫–∞–∑—ã–≤–∞—é —Ü–µ–ª—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —è —É–±—Ä–∞–ª –∏–∑ –Ω–µ–µ aka
@bot.callback_query_handler(func=lambda call: call.data.split("_")[0] == "one" or call.data.split("_")[0] == "chan")
def show_card_one_by_one(call):
    card_list = cfg.search_user_cards(call.message.chat.id)
    if card_list is None:
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üÉè –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="getcar"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text(text="–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–∞", chat_id=call.message.chat.id,
                              message_id=call.message.message_id, reply_markup=markup)
        return
    if call.data.split("_")[0] != "chan":
        num = int(call.data.replace("one_by_", ""))
    else:
        num = int(call.data.replace("chan_by_", ""))
    card_num = cfg.search_user_in_db(call.message.chat.id)[1]
    markup = tp.InlineKeyboardMarkup()
    if call.data.split("_")[0] != "chan":
        list_btn = tp.InlineKeyboardButton(
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–æ–º", callback_data="coll")
        next_btn = tp.InlineKeyboardButton(
            text=">>", callback_data="one_by_" + str(num + 1))
        back_btn = tp.InlineKeyboardButton(
            text="<<", callback_data="one_by_" + str(num - 1))
    else:
        markup.row(tp.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞",
                   callback_data="offer_" + str(card_list[num][0])))
        next_btn = tp.InlineKeyboardButton(
            text=">>", callback_data="chan_by_" + str(num + 1))
        back_btn = tp.InlineKeyboardButton(
            text="<<", callback_data="chan_by_" + str(num - 1))
    num_btn = tp.InlineKeyboardButton(
        text='(' + str(num + 1) + '/' + str(card_num) + ')', callback_data="...")
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    rareness = cfg.get_rareness_by_num(card_list[num][5])
    caption_str = str(card_list[num][2]) + " *" + str(card_list[num][3]) \
        + "*\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_list[num][6]) \
        + "*\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_list[num][4]) + "*\n" \
        + "–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rareness + "*"
    if len(card_list) == 1:
        markup.row(num_btn)
        if call.data.split("_")[0] != "chan":
            markup.row(list_btn)
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="new_lk"))
        else:
            markup.row(tp.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))

        if call.message.photo is None:
            msg = bot.send_photo(call.message.chat.id, card_list[num][1], reply_markup=markup,
                                 caption=caption_str, parse_mode='Markdown')
            cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
            return
    if num == 0:
        markup.row(num_btn, next_btn)
        if call.data.split("_")[0] != "chan":
            markup.row(list_btn)
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="new_lk"))
        else:
            markup.row(tp.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))

        if call.message.photo is None:
            msg = bot.send_photo(call.message.chat.id, card_list[num][1], reply_markup=markup,
                                 caption=caption_str, parse_mode='Markdown')
            cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
            return
    elif num == len(card_list) - 1:
        markup.row(back_btn, num_btn)
        if call.data.split("_")[0] != "chan":
            markup.row(list_btn)
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="new_lk"))
        else:
            markup.row(tp.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))
    else:
        markup.row(back_btn, num_btn, next_btn)
        if call.data.split("_")[0] != "chan":
            markup.row(list_btn)
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="new_lk"))
        else:
            markup.row(tp.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))
    bot.edit_message_media(chat_id=call.message.chat.id, message_id=msg_id,
                           media=tp.InputMediaPhoto(card_list[num][1]), reply_markup=markup)
    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=msg_id,
                             caption=caption_str, reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: "offer_" in call.data)
def insert_card_to_offer(call):
    # –ø–æ–ª—É—á–∞–µ–º id –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    card_id = int(call.data.replace("offer_", ""))
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ —É –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≤ –æ–±–º–µ–Ω
    bool_pl = cfg.second_user_had_card(call.message.chat.id)
    # –µ—Å–ª–∏ –æ–±–º–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), —Ç–æ –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–µ–º
    if not cfg.is_offer_defined(call.message.chat.id):
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        cfg.create_new_change_offer(call.message.chat.id, card_id)
        bot.send_message(call.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username), —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è")
        bot.register_next_step_handler(call.message, get_second_user_for_offer)
        return
    elif bool_pl != -1 and not bool_pl:
        cfg.add_card_to_offer(call.message.chat.id, card_id)
        msg = bot.send_message(
            call.message.chat.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ")
        cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
        user_id = cfg.get_first_user(call.message.chat.id)
        card = cfg.get_trade_card(user_id, 1)
        card1 = cfg.get_trade_card(user_id, 0)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="trade"))
        markup.add(tp.InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))
        bot.send_photo(chat_id=user_id, photo=card[1],
                       caption="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞!\n"
                               "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞ –≤–∞—à—É:\n" + card1[2] + " aka " + card1[3] + "\n" +
                               "–° —Ä–µ–¥–∫–æ—Å—Ç—å—é - " + cfg.get_rareness_by_num(card1[5]), reply_markup=markup)


# —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã –≤ –ø–µ–Ω–∞–ª—å—Ç–∏
@bot.callback_query_handler(func=lambda call: "pen_" in call.data)
def penalti_game(call):
    if call.data == "pen_canc":
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
        res = pnt.delete_game(call.message.chat.id)
        msg = bot.send_message(call.message.chat.id, "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏–≥—Ä—É –≤ –ø–µ–Ω–∞–ª—å—Ç–∏",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
        msg = bot.send_message(chat_id=res[0],
                               text=f"‚ùå @{get_username_by_id(res[1])} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, res[0])
        return
    if call.data == "pen_start":
        markup = tp.InlineKeyboardMarkup()
        btn_one = tp.InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="pen_1")
        btn_two = tp.InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="pen_2")
        btn_three = tp.InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="pen_3")
        markup.row(btn_one, btn_two, btn_three)
        pnt.start_game(call.message.chat.id)
        kicker_id = pnt.get_kicker(call.message.chat.id)
        bot.send_photo(chat_id=call.message.chat.id, photo=open('images/keeper.png', 'rb'),
                       caption="–í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å",
                       reply_markup=markup)
        bot.send_photo(chat_id=kicker_id, photo=open('images/keeper.png', 'rb'),
                       caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞—Ä–∏—Ç—å",
                       reply_markup=markup)
    else:
        markup = tp.InlineKeyboardMarkup()
        btn_one = tp.InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="pen_1")
        btn_two = tp.InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="pen_2")
        btn_three = tp.InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="pen_3")
        markup.row(btn_one, btn_two, btn_three)
        pnt.set_kick_time(call.message.chat.id)
        num = int(call.data.replace("pen_", ""))
        pnt.place_turn_in_db(call.message.chat.id, num)
        res = pnt.is_scored(call.message.chat.id)
        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 caption=f"–í–∞—à –≤—ã–±–æ—Ä - {num}\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
                                 reply_markup=None)
        scores = pnt.get_score_str(call.message.chat.id)
        if res[0]:
            kicker_text = f"‚öΩÔ∏è –ì–û–õ!!!\n@{get_username_by_id(res[2])} –ø—Ä—ã–≥–Ω—É–ª –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É\n" \
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
            keeper_text = f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª\n@{get_username_by_id(res[1])} –±–∏–ª –≤ –¥—Ä—É–≥–æ–π —É–≥–æ–ª\n" \
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                          f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"
        elif res[1] != -1:
            kicker_text = f"‚ùå –£–≤—ã —Ç—ã –Ω–µ –∑–∞–±–∏–ª\n@{get_username_by_id(res[2])} —É–≥–∞–¥–∞–ª —Ç–≤–æ–π —É–¥–∞—Ä\n" \
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
            keeper_text = f"üèÜ –¢—ã –æ—Ç–±–∏–ª —É–¥–∞—Ä\n@{get_username_by_id(res[1])} –±–∏–ª –≤ —Ç–æ—Ç –∂–µ —É–≥–æ–ª\n" \
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"
        finish = check_finish_game_penalti(call, res, scores)
        if not finish:
            try:
                bot.send_message(res[1], kicker_text)
            except UnboundLocalError as err:
                print("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–Ω—å—à–µ –µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                print(err)
            bot.send_message(res[2], keeper_text)
            pnt.change_kicker(res[2])
            bot.send_photo(res[1], open('images/keeper.png', 'rb'),
                           "–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å",
                           reply_markup=markup)
            bot.send_photo(res[2], open('images/keeper.png', 'rb'),
                           "–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞—Ä–∏—Ç—å",
                           reply_markup=markup)


@bot.callback_query_handler(func=lambda call: "trade" in call.data)
def call_trade(call):
    if call.data == "trade_canc":
        trade_id = cfg.cancel_trade(call.message.chat.id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üé≠ –û–±–º–µ–Ω –∫–∞—Ä—Ç–∞–º–∏", callback_data="chan_by_0"))
        markup.add(tp.InlineKeyboardButton(
            text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
        if trade_id[0] == 0:
            msg = bot.send_message(call.message.chat.id,
                                   "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
            return
        if trade_id[0] != call.message.chat.id:
            msg = bot.send_message(
                trade_id[0], "‚ùå –£–≤—ã, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.", reply_markup=markup)
            msg1 = bot.send_message(
                trade_id[1], "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=markup)
        else:
            msg = bot.send_message(
                trade_id[1], "‚ùå –£–≤—ã, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.", reply_markup=markup)
            msg1 = bot.send_message(
                trade_id[0], "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=markup)
        cfg.insert_lk_message_id(msg1.message_id, trade_id[0])
        cfg.insert_lk_message_id(msg.message_id, trade_id[1])

    if call.data == "trade":
        trade_id = cfg.do_trade(call.message.chat.id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üß≥ –ú–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è", callback_data="one_by_0"))
        markup.add(tp.InlineKeyboardButton(
            text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
        if trade_id[0] != call.message.chat.id:
            msg = bot.send_message(trade_id[0], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                   reply_markup=markup)
            msg1 = bot.send_message(trade_id[1], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                    reply_markup=markup)
        else:
            msg = bot.send_message(trade_id[1], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                   reply_markup=markup)
            msg1 = bot.send_message(trade_id[0], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                    reply_markup=markup)
        cfg.insert_lk_message_id(msg1.message_id, trade_id[0])
        cfg.insert_lk_message_id(msg.message_id, trade_id[1])


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.isdigit() and int(call.data) < 7)
def get_buy_message(call):
    if call.data == "0":
        check_pay(call)
    else:
        cfg.clear_user_transaction(call.message.chat.id)
        operation_id = cfg.get_operation_id(call.message.chat.id, call.data)
        redirect_uri = pt.quick_pay(
            "buy cards", cfg.get_price(int(call.data)), operation_id)
        if int(call.data) != 4:
            cfg.place_operation_in_db(
                call.message.chat.id, operation_id, "–ü–æ–∫—É–ø–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
        else:
            cfg.place_operation_in_db(
                call.message.chat.id, operation_id, "–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–¥–∞—Ä–æ–≤")
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=redirect_uri))
        markup.add(tp.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_pay"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text(message_id=cfg.get_lk_id_message(call.message.chat.id), chat_id=call.message.chat.id,
                              text="–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω\n–û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
                              reply_markup=markup)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data == "check_pay")
def check_pay(call):
    free_card = cfg.check_free_card(call.message.chat.id)
    if call.data == "0" and free_card[0]:
        cfg.add_cards_to_user(cfg.get_random_card(1), call.message.chat.id)
        cfg.push_free_card_date(call.message.chat.id)
        # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ
        cfg.set_get_msg(call.message.chat.id, 0)
        show_new_card(call)
    elif call.data == "0" and not free_card[0]:
        ans = free_card[1].split(":")
        # –∏–∑–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∏–∂–µ
        ans_str = ans[0] + "—á " + ans[1] + "–º–∏–Ω ‚è±Ô∏è"
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üõç –ú–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="store"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        bot.edit_message_text(message_id=cfg.get_lk_id_message(call.message.chat.id), chat_id=call.message.chat.id,
                              text="–¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–ª —Å–≤–æ—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É! "
                                   "–°–ª–µ–¥—É—é—â—É—é —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ " + ans_str + ". "
                                   "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∂–¥–∞—Ç—å - –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!",
                              reply_markup=markup)
    elif call.data != "0":
        print(call.data)
        operation_id = cfg.get_active_transaction(call.message.chat.id)
        if pt.check_payment(operation_id):
            # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ
            cfg.save_transaction(call.message.chat.id)
            product_id = operation_id.split("|")[1]
            if int(product_id) == 1:
                card_num = 1
            if int(product_id) == 2:
                card_num = 3
            if int(product_id) == 3:
                card_num = 5
            if int(product_id) == 4:
                ls.update_user_strikes(call.from_user.id, 1)
                markup = tp.InlineKeyboardMarkup()
                markup.add(tp.InlineKeyboardButton(
                    text="üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="games"))
                bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                      text="–£—Å–ø–µ—à–Ω–æ ‚úÖ, –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É–¥–∞—Ä—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã –≤–∞–º,"
                                           "–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É!", reply_markup=markup)
                return
            cfg.add_cards_to_user(cfg.get_random_card(
                card_num), call.message.chat.id)
            cfg.plus_user_transactions(call.message.chat.id)
            markup = tp.InlineKeyboardMarkup()
            markup.add(
                tp.InlineKeyboardButton(text="\U0001F0CF –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ \U0001F0CF", callback_data="get_new_cards"))
            bot.edit_message_text(message_id=cfg.get_lk_id_message(call.message.chat.id), chat_id=call.message.chat.id,
                                  text="–£—Å–ø–µ—à–Ω–æ ‚úÖ, –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑", reply_markup=markup)


# –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–±–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data == "get_new_cards")
def show_new_card(call):
    card_info = cfg.get_last_cards(call.message.chat.id)
    if card_info[1] >= 1:
        ans = str(card_info[0][2]) + " aka " + str(card_info[0][3]) \
            + "\n–†–µ–π—Ç–∏–Ω–≥: " + str(card_info[0][6]) \
              + "\n–ö–æ–º–∞–Ω–¥–∞: " + str(card_info[0][4]) + "\n" \
              + "–†–µ–¥–∫–æ—Å—Ç—å: " + cfg.get_rareness_by_num(card_info[0][5])
        markup = tp.InlineKeyboardMarkup()
        if card_info[1] == 1:
            markup.add(tp.InlineKeyboardButton(
                text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="new_lk"))
        else:
            markup.add(tp.InlineKeyboardButton(
                text="–î–∞–ª—å—à–µ \U0001F449", callback_data="get_new_cards"))
        bot.send_photo(call.message.chat.id,
                       card_info[0][1], caption=ans, reply_markup=markup)


# —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—ã–ª –ø–µ—Ä–µ–ø–∏—Å–∞–Ω (—á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —É–¥–æ–±–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º)
@bot.callback_query_handler(func=lambda call: call.data == "admin")
def get_admin(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="–ö–∞—Ä—Ç–æ—á–∫–∏", callback_data="admin_card"))
    markup.add(tp.InlineKeyboardButton(
        text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo"))
    markup.add(tp.InlineKeyboardButton(
        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
    bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                          text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å\n"
                               "–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
                          reply_markup=markup)


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º
@bot.callback_query_handler(func=lambda call: "admin_" in call.data)
def admin_sections(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    section = call.data.split("_")[1]
    markup = tp.InlineKeyboardMarkup()
    if section != "users":
        add_btn = tp.InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å", callback_data="adm_add_" + section)
        del_btn = tp.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å", callback_data="adm_del_" + section)
        markup.row(add_btn, del_btn)
        if section == "card":
            markup.row(tp.InlineKeyboardButton(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="adm_update"))
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏!\n"
                                       "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                                  reply_markup=markup)
        else:
            markup.row(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏!\n"
                                       "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                                  reply_markup=markup)
    else:
        markup.add(tp.InlineKeyboardButton(
            text="–ò–Ω—Ñ–æ –ø–æ —é–∑–µ—Ä—É", callback_data="get_user"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!\n"
                                   "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å",
                              reply_markup=markup)


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@bot.callback_query_handler(func=lambda call: "get_user" in call.data)
def users_processing(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin_users"))
    if call.data == "get_user":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                                   "–æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                              reply_markup=markup)
        bot.register_next_step_handler(call.message, get_username_for_admin)
        return
    if "get_user_hist" in call.data:
        user_id = int(call.data.split("_")[3])
        ans_str = adm.get_user_transactions_info(
            user_id, get_username_by_id(user_id))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=ans_str, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.split("_")[0].isdigit() and int(call.data.split("_")[0]) >= 15)
def redact_card(call):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    msg_id = call.message.message_id
    card = cfg.get_card_by_id(int(call.data.split("_")[0]))[0]
    new_caption = card + \
        "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n" \
        "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n" \
        "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ"
    if call.message.caption is not None:
        new_caption = call.message.caption + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n" \
                                             "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n" \
                                             "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ"
    bot.edit_message_caption(chat_id=call.message.chat.id, message_id=msg_id,
                             caption=new_caption)
    bot.register_next_step_handler(
        call.message, get_new_photo, int(call.data.split("_")[0]))


@bot.callback_query_handler(func=lambda call: "adm_" in call.data and cfg.is_admin(call.message.chat.id))
def admin_execute(call):
    if call.data == "adm_add_card":
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        bot.edit_message_text(message_id=cfg.get_lk_id_message(call.message.chat.id),
                              chat_id=call.message.chat.id,
                              text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"
                                   "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n"
                                   "2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n"
                                   "3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n"
                                   "4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                                   "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
                                   "—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ",
                              reply_markup=markup)
        bot.register_next_step_handler(call.message, get_photo)
    if call.data == "adm_add_promo":
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        # –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã —ç—Ç–æ–π –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"
                                   "\n–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "
                                   "–Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                              reply_markup=markup)
        bot.register_next_step_handler(call.message, get_promo_text)
    if call.data == "adm_del_promo":
        markup = tp.InlineKeyboardMarkup()
        promos = adm.select_all_promos()
        print(promos)
        if promos is not None:
            for i in range(0, len(promos[0])):
                markup.add(tp.InlineKeyboardButton(text=str(promos[0][i][1]) + " - " + promos[1][i][2],
                                                   callback_data="promo_" + str(promos[0][i][0]) + "_del"))
            # –∏–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ (—É–±—Ä–∞–Ω —Ç–∞–±)
            markup.add(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        else:
            markup.add(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
            msg = bot.edit_message_text(chat_id=call.message.chat.id, text="–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                                        message_id=call.message.message_id, reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
            return
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ - –∫–∞—Ä—Ç–æ—á–∫–∞",
                              reply_markup=markup)
    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ
    if call.data == "adm_update":
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="redact_62_0"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text="–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, "
                                   "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                              reply_markup=markup)
    if call.data == "adm_del_card":
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="destroy_62_0"))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        bot.edit_message_text(message_id=call.message.message_id, chat_id=call.message.chat.id,
                              text="–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, "
                                   "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                              reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "new_lk")
def get_new_lk(call):
    # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if not is_subscribed(call.message.chat.id):
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è \U00002705", url="https://t.me/offsidecard"))
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                         reply_markup=markup)
        return
    go_to_lk_message(call.message.chat.id)


# –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º)
@bot.callback_query_handler(func=lambda call: "choose_" in call.data or "redact_" in call.data or "destroy_" in call.data)
def show_all_cards(call):
    num = int(call.data.split("_")[2])
    card_list = adm.select_all_cards()
    markup = tp.InlineKeyboardMarkup()
    if "choose_" in call.data:
        promo_id = int(call.data.split("_")[1])
        next_btn = tp.InlineKeyboardButton(
            text=">>", callback_data="choose_" + str(promo_id) + "_" + str(num + 1))
        back_btn = tp.InlineKeyboardButton(
            text="<<", callback_data="choose_" + str(promo_id) + "_" + str(num - 1))
        choose_btn = tp.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–º–æ",
                                             callback_data="promo_" + str(promo_id) + "_" + str(card_list[num][0]))
    if "redact_" in call.data:
        card_id = 62
        next_btn = tp.InlineKeyboardButton(
            text=">>", callback_data="redact_" + str(card_id) + "_" + str(num + 1))
        back_btn = tp.InlineKeyboardButton(
            text="<<", callback_data="redact_" + str(card_id) + "_" + str(num - 1))
        choose_btn = tp.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data=str(card_list[num][0]) + "_old")
    if "destroy_" in call.data:
        card_id = 62
        next_btn = tp.InlineKeyboardButton(
            text=">>", callback_data="destroy_" + str(card_id) + "_" + str(num + 1))
        back_btn = tp.InlineKeyboardButton(
            text="<<", callback_data="destroy_" + str(card_id) + "_" + str(num - 1))
    num_btn = tp.InlineKeyboardButton(
        text='(' + str(num + 1) + '/' + str(len(card_list)) + ')', callback_data="...")
    msg_id = cfg.get_lk_id_message(call.message.chat.id)
    if "destroy_" not in call.data:
        markup.row(choose_btn)
    else:
        del_btn = tp.InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å", callback_data="delete_card_" + str(card_list[num][0]))
        markup.row(del_btn)
    if num == 0:
        markup.row(num_btn, next_btn)
        if call.message.photo is None:
            msg = bot.send_photo(call.message.chat.id,
                                 card_list[num][1], reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)
        else:
            bot.edit_message_media(chat_id=call.message.chat.id, message_id=msg_id,
                                   media=tp.InputMediaPhoto(card_list[num][1]), reply_markup=markup)
    elif num == len(card_list) - 1:
        markup.row(back_btn, num_btn)
        bot.edit_message_media(chat_id=call.message.chat.id, message_id=msg_id,
                               media=tp.InputMediaPhoto(card_list[num][1]), reply_markup=markup)
    else:
        markup.row(back_btn, num_btn, next_btn)
        bot.edit_message_media(chat_id=call.message.chat.id, message_id=msg_id,
                               media=tp.InputMediaPhoto(card_list[num][1]), reply_markup=markup)


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
@bot.callback_query_handler(func=lambda call: "delete_card" in call.data)
def delete_card(call):
    card_id = call.data.split("_")[2]
    adm.delete_card(card_id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
    msg = bot.send_message(call.message.chat.id, "–ö–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                           reply_markup=markup)
    cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)


@bot.callback_query_handler(func=lambda call: "promo_" in call.data)
def add_card_to_promo(call):
    promo_id = call.data.split("_")[1]
    if call.data.split("_")[2] == "del":
        adm.delete_promo(promo_id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin"))
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", reply_markup=markup)
        return
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
    markup.add(tp.InlineKeyboardButton(
        text="–ö –ø–æ–ª—É—á–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫", callback_data="getcar"))
    if call.data.split("_")[2] == "rng":
        adm.insert_promo_card(promo_id, 0)
    else:
        info = call.data.split("_")
        card_id = info[2]
        adm.insert_promo_card(promo_id, card_id)
    msg = bot.send_message(call.message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –í—Ä–µ–º—è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
                           reply_markup=markup)
    cfg.insert_lk_message_id(msg.message_id, call.message.chat.id)


def check_promocode(message):
    res = adm.check_promo(message.chat.id, message.text)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="back"))
    markup.add(tp.InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="getcar"))
    if res[0]:
        # —Ç–µ–ª–æ —ç—Ç–æ–≥–æ if –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
        if res[1] == 0:
            cfg.add_cards_to_user(cfg.get_random_card(1), message.chat.id)
        else:
            adm.add_card_to_user_by_card_id(res[1], message.chat.id)
        adm.minus_promo_usages(message.text)
        get_show_new_cards(message)
        # –∫–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π
    else:
        msg = bot.send_message(message.chat.id, "–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–πüòî",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.chat.id)


# —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞
def get_promo_text(message):
    promo = message.text.split(" ")[0]
    if len(message.text.split(" ")) > 1:
        usages = message.text.split(" ")[1]
    else:
        usages = "INF"
    promo_id = adm.place_promo(promo, usages)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É",
               callback_data="choose_" + str(promo_id) + "_0"))
    markup.add(tp.InlineKeyboardButton(text="–†–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞",
               callback_data="promo_" + str(promo_id) + "_rng"))
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, "
                                      "—á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞", reply_markup=markup)


def get_second_user_for_offer(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    username = message.text.replace("@", "")
    # –∏–∑–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∏–∂–µ
    user_id = search_user_by_username(username, message.chat.id)
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="üßëüíª –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="new_lk"))
    if user_id == -1:
        bot.send_message(message.from_user.id,
                         "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                         reply_markup=markup)
    else:
        cfg.insert_second_user(message.chat.id, user_id)
        card = cfg.get_trade_card(message.chat.id, 0)
        msg = bot.send_message(message.from_user.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
                                                     "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - @" + username)
        cfg.insert_lk_message_id(msg.message_id, message.chat.id)
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="üÉè –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–±–º–µ–Ω–∞", callback_data="chan_by_0"))
        markup.add(tp.InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–±–º–µ–Ω", callback_data="trade_canc"))
        msg = bot.send_photo(chat_id=user_id, photo=card[1],
                             caption="–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç - @" +
                             get_username_by_id(message.chat.id),
                             reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, user_id)


def get_username_for_pen(message):
    # –∏–∑–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ
    tele_id2 = search_user_by_username(message.text, message.from_user.id)
    if tele_id2 == -1:
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
        msg = bot.send_message(message.chat.id, "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ ‚òπÔ∏è\n"
                                                "–ï–º—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.chat.id)
    else:
        # –Ω–∏–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
        if pnt.check_delta_rating(message.chat.id, tele_id2):
            markup = tp.InlineKeyboardMarkup()
            markup.add(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
            msg = bot.send_message(message.chat.id,
                                   "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –ø–µ–Ω–∞–ª—å—Ç–∏ —Å " + message.text +
                                   " –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ‚òπÔ∏è",
                                   reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, message.chat.id)
            return
        markup = tp.InlineKeyboardMarkup()
        if not pnt.user_in_game(tele_id2):
            pnt.create_game(message.chat.id)
            pnt.insert_second_user(tele_id2, message.chat.id)

            markup.add(tp.InlineKeyboardButton(
                text="‚úÖ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="pen_start"))
            markup.add(tp.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="pen_canc"))
            msg = bot.send_message(tele_id2,
                                   "@" +
                                   get_username_by_id(
                                       message.chat.id) + " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤ –ü–µ–Ω–∞–ª—å—Ç–∏!",
                                   reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, tele_id2)
            bot.send_message(
                message.chat.id, "üì©–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + message.text + "!")
        else:
            markup.add(tp.InlineKeyboardButton(
                text="–ü–ï–ù–ê–õ–¨–¢–ò‚öΩÔ∏è", callback_data="penalti"))
            markup.add(tp.InlineKeyboardButton(
                text="‚è™ –ù–∞–∑–∞–¥", callback_data="back"))
            msg = bot.send_message(message.chat.id, "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ ‚òπÔ∏è\n"
                                                    "–û–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º—É-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–º—É",
                                   reply_markup=markup)
            cfg.insert_lk_message_id(msg.message_id, message.from_user.id)


# –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–Ω–µ–π–º–∞ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ—ã –æ –Ω–µ–º)
def get_username_for_admin(message):
    user_id = search_user_by_username(message.text, -1)
    markup = tp.InlineKeyboardMarkup()
    if user_id == -1:
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin_users"))
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. "
                                          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö",
                         reply_markup=markup)
    else:
        markup.add(tp.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫",
                   callback_data="get_user_hist_" + str(user_id)))
        markup.add(tp.InlineKeyboardButton(
            text="‚è™ –ù–∞–∑–∞–¥", callback_data="admin_users"))
        user_str = adm.get_user_info(user_id, message.text)
        msg = bot.send_message(
            message.chat.id, text=user_str, reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.chat.id)


def get_photo(message):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    player_info = message.text.split("\n")
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin"))
    card = cfg.place_player_in_db(player_info)
    if card is not None and cfg.check_card_info(player_info) != -1:
        bot.send_message(message.from_user.id,
                         "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞")
        bot.register_next_step_handler(message, save_card_photo, card[0])
    else:
        msg = bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)
        bot.register_next_step_handler(message, get_photo)


def save_card_photo(message, card_id):
    if cfg.set_card_photo(card_id, message.photo[0].file_id) != -1:
        # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–ª–æ —ç—Ç–æ–≥–æ if
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="new_lk"))
        markup.add(tp.InlineKeyboardButton(
            text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=str(card_id) + "_new"))
        new_card = cfg.get_card_by_id(card_id)
        bot.send_photo(message.from_user.id,
                       new_card[1], caption=new_card[0], reply_markup=markup)
    else:
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–í –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å", callback_data="admin"))
        msg = bot.send_message(
            message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º")
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)


def get_new_photo(message, card_id):
    bot.clear_step_handler_by_chat_id(message.chat.id)
    player_info = message.text.split("\n")
    markup = tp.InlineKeyboardMarkup()
    markup.add(tp.InlineKeyboardButton(
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–∞–Ω–µ–ª–∏", callback_data="admin"))
    card = cfg.edit_card_in_db(card_id, player_info)
    if card is not None and cfg.check_card_info(player_info) != -1:
        markup.add(tp.InlineKeyboardButton(
            text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="admin"))
        msg = bot.send_message(
            message.from_user.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞", reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)
        bot.register_next_step_handler(message, save_new_card_photo, card_id)
    else:
        msg = bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                               reply_markup=markup)
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)
        bot.register_next_step_handler(message, get_new_photo, card_id)


def save_new_card_photo(message, card_id):
    if cfg.set_card_photo(card_id, message.photo[0].file_id) != -1:
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin"))
        new_card = cfg.get_card_by_id(card_id)
        bot.send_photo(message.from_user.id,
                       new_card[1], caption=new_card[0], reply_markup=markup)
        msg = bot.send_message(message.from_user.id, ".")
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)
    else:
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="–í –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å", callback_data="admin"))
        msg = bot.send_message(
            message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º")
        cfg.insert_lk_message_id(msg.message_id, message.from_user.id)


# –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥–µ
def get_show_new_cards(message):
    card_info = cfg.get_last_cards(message.chat.id)
    if card_info[1] >= 1:
        ans = str(card_info[0][2]) + " " + str(card_info[0][3]) \
            + "\n–†–µ–π—Ç–∏–Ω–≥: " + str(card_info[0][6]) \
              + "\n–ö–æ–º–∞–Ω–¥–∞: " + str(card_info[0][4]) + "\n" \
              + "–†–µ–¥–∫–æ—Å—Ç—å: " + cfg.get_rareness_by_num(card_info[0][5])
        markup = tp.InlineKeyboardMarkup()
        markup.add(tp.InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="new_lk"))
        bot.send_photo(message.chat.id,
                       card_info[0][1], caption=ans, reply_markup=markup)


# –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞, —Ç—É—Ç –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ timer –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ –∏ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —ç—Ç–æ
time_checker = threading.Thread(target=time_events_checker)
time_checker.start()

cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})


cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})
