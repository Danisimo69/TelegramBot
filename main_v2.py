import asyncio
import datetime
import glob
import logging
import os
import random
import string
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.utils.deep_linking import create_start_link, decode_payload
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ContentType, \
    InputFile
from aiogram import F

from Keyboards.UserKeyboards import InlineButtons
from config import *
from lucky_strike import *
from main_config import token, CHANNEL_ID
from penalti import *
from timers import *

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher()

CHANNEL_ID = CHANNEL_ID

async def is_subscribed(USER_ID):
    member = await bot.get_chat_member(CHANNEL_ID, USER_ID)
    if member.status not in ['left', 'kicked']:
        return True
    else:
        return False

async def get_username_by_id(tele_id):
    user = await bot.get_chat_member(CHANNEL_ID, tele_id)
    username = user.username
    return str(username)


@dp.message(Command("start"))
async def start_message(message: types.Message, state: FSMContext):
    await clear_non_active_users()

    if not await is_subscribed(message.from_user.id):

        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                             "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @offsidecard\n"
                             "2Ô∏è‚É£ –ù–∞–∂–∞—Ç—å –Ω–∞ /start", reply_markup=InlineButtons.start_kb__not_sub())

    elif not await check_spam(message.from_user.id):

        await place_user_in_bd(message.from_user.id)
        sent_msg = await message.answer("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                                        "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                                        "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                                        "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                                        "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                                        "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                                        "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: *¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                                        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                                        reply_markup=InlineButtons.start_kb__sub(), parse_mode='Markdown')
        await insert_lk_message_id(sent_msg.message_id, message.from_user.id)

@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await clear_non_active_users()
    await callback.message.edit_text("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                         "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                         "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                         "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                         "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                         "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                         "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: *¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                         "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                         reply_markup=InlineButtons.start_kb__sub(), parse_mode='Markdown')

@dp.callback_query(F.data == "info")
async def answer_info_callback(callback: types.CallbackQuery):

    await callback.message.edit_text(text="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç", reply_markup=InlineButtons.info_kb())

# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.callback_query(F.data[-5:] == "_info")
async def answer_questions(callback: types.CallbackQuery):


    if callback.data == "card_info":
        await callback.message.edit_text("–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ç–≤–æ–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
                                   "1) –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 1000 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "2) –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 500 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "3) –≠–ø–∏—á–µ—Å–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 250 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "4) –ù–µ–æ–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 100 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
                                   "5) –û–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 50 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n",
                              reply_markup=InlineButtons.back_kb())
    if callback.data == "penalti_info":
        await callback.message.edit_text("–ò–≥—Ä–∞ –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ OFFSIDE, "
                                   "–≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–±–∏–≤–∞—Ç—å –∏ –æ—Ç–±–∏–≤–∞—Ç—å –º—è—á–∏.\n\n"
                                   "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                   "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                   "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚öΩÔ∏è –ü–µ–Ω–∞–ª—å—Ç–∏¬ª\n"
                                   "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å.\n"
                                   "–ò–≥—Ä–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –¥–µ–ª–∞—Ç—å —É–¥–∞—Ä—ã. "
                                   "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –≤ —Ä–æ–ª–∏ –≤—Ä–∞—Ç–∞—Ä—è, –µ–≥–æ –∑–∞–¥–∞—á–∞: —Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—É—é —Ü–∏—Ñ—Ä—É,"
                                   " —á—Ç–æ–±—ã –ø—Ä—ã–≥–Ω—É—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª –∏ –æ—Ç—Ä–∞–∑–∏—Ç—å —É–¥–∞—Ä. "
                                   "–î–∞–ª–µ–µ –≤—ã –º–µ–Ω—è–µ—Ç–µ—Å—å –º–µ—Å—Ç–∞–º–∏, —Ç–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—è—Ç—å —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. "
                                   "–í –∏—Ç–æ–≥–µ, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º—è—á–µ–π. "
                                   "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∏—á—å—è.\n\n"
                                   "–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è  +25 –±–∞–ª–ª–æ–≤, –∞ –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è -25 –±–∞–ª–ª–æ–≤. "
                                   "–í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –¥–∞–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 100. "
                                   "–ó–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∏—á—å–µ–π —Ä–µ–π—Ç–∏–Ω–≥ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.",
                              reply_markup=InlineButtons.back_kb())
    if callback.data == "strike_info":
        await callback.message.edit_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                   "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                   "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä¬ª\n"
                                   "3. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚öΩÔ∏è –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä¬ª\n\n"
                                   "‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º.\n"
                                   "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.\n"
                                   "–ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - –ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.\n"
                                   "–í –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                                   "–ï—Å–ª–∏ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ–∑–µ—Ç –∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —É–¥–∞—Ä–æ–≤ –ø–æ –≤–æ—Ä–æ—Ç–∞–º - "
                                   "–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.",
                              reply_markup=InlineButtons.back_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'a –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@dp.callback_query(F.data == "back")
async def return_to_lk(callback: types.CallbackQuery):

    await calc_card_rating(callback.from_user.id)
    await cancel_trade(callback.from_user.id)

    user = await search_user_in_db(callback.from_user.id)

    stat_str = "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\nüÉè –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: " + str(user.card_num) + "\n" \
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:" + str(user.card_rating) + "\n\n" \
                "‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ü–µ–Ω–∞–ª—å—Ç–∏: " + str(user.penalty_rating)

    await callback.message.edit_text(stat_str, reply_markup=InlineButtons.back_lk_kb(await is_admin(callback.from_user.id)))


@dp.callback_query(F.data == "rate")
async def get_player_rating(callback: types.CallbackQuery):
    await calc_card_rating(callback.from_user.id)

    await callback.message.edit_text("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üèÜ–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!",
                          reply_markup=InlineButtons.rate_kb())


@dp.callback_query(F.data[:5] == "rate_")
async def get_top_places(callback: types.CallbackQuery):
    num = 1
    ans_str = ""

    places = get_user_places(callback.from_user.id)

    if callback.data == "rate_card":
        card_top = get_top_places_()[0]
        for user in card_top:
            ans_str += str(num) + ". @" + await get_username_by_id(user.tele_id) \
                + " - " + str(user.card_rating) + "\n"
            num += 1
        if not user_in_top_ten(callback.from_user.id)[0]:
            user = search_user_in_db(callback.from_user.id)
            ans_str += "\n" + str(places[0]) + ". @" + callback.from_user.username + \
                " - " + str(user.card_rating)

    if callback.data == "rate_pen":
        penalti_top = get_top_places_()[1]
        for user in penalti_top:
            ans_str += str(num) + ". @" + await get_username_by_id(user.tele_id) \
                + " - " + str(user.penalty_rating) + "\n"
            num += 1
        if not user_in_top_ten(callback.from_user.id)[1]:
            user = search_user_in_db(callback.from_user.id)
            ans_str += "\n" + str(places[1]) + ". @" \
                       + callback.from_user.username + \
                " - " + str(user.penalty_rating)

    await callback.message.edit_text(ans_str, reply_markup=InlineButtons.back_kb())



@dp.callback_query(F.data == "coll")
async def get_collection(callback: types.CallbackQuery):
    user_cards = get_user_card_list(callback.from_user.id)

    if user_cards is None:

        await callback.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ –≤–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞", reply_markup=InlineButtons.take_card_kb(have_cards=False))
    else:

        ans_str = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: \n\n"
        num = 1
        await calc_card_rating(callback.from_user.id)

        for i in range(0, len(user_cards[0])):
            ans_str += str(num) + ". " + str(user_cards[0][i].player_name) + " (" + str(user_cards[0][i].player_nickname) + ") - " + \
                str(user_cards[1][i].num) + " —à—Ç.\n"
            num += 1
        msg = await callback.message.answer(ans_str, reply_markup=InlineButtons.take_card_kb(have_cards=True))

        await insert_lk_message_id(msg.message_id, callback.from_user.id)


# –≤—ã–∑–æ–≤ –º–∏–Ω–∏-–∏–≥—Ä
@dp.callback_query(F.data == "games")
async def get_mini_games(callback: types.CallbackQuery):

    await callback.message.edit_text("–¢—É—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∏–Ω–∏-–∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –∏–∑ –≤–∞—Å –ª—É—á—à–∏–πü•á",
                          reply_markup=InlineButtons.games_kb())


@dp.callback_query(F.data == "penalti")
async def penalti_message(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)

    if not user_in_game(callback.from_user.id):
        await callback.message.edit_text("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
                              reply_markup=InlineButtons.back_kb())
        # bot.register_next_step_handler(call.message, get_username_for_pen)
    else:
        await callback.message.edit_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–µ, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é",
                              reply_markup=InlineButtons.back_kb())

@dp.callback_query(F.data == "lucky_strike")
async def lucky_strike(callback: types.CallbackQuery):

    msg = await callback.message.edit_text("‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º. "
                                     "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.–ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - "
                                     "–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
                                reply_markup=InlineButtons.lucky_strike_kb())
    await insert_lk_message_id(msg.message_id, callback.from_user.id)


# —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä
@dp.callback_query(F.data == "do_strike")
async def do_strike(callback: types.CallbackQuery):
    free_info = check_free_strike(callback.from_user.id)
    purchased = check_purchased_strikes(callback.from_user.id)

    tasks = []

    if free_info[0] or purchased[0]:
        msg = await callback.message.answer_dice('‚öΩÔ∏è')
        if msg.dice.value < 3:

            await update_user_strikes(callback.from_user.id, -1)

            if not purchased[0] or purchased[1] == 1:
                msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"
                tasks.append("b3")
            else:
                msg_text = f"‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ - {purchased[1] - 1}"
                tasks.append("no_b3")

            tasks.append("back")

        else:
            await update_user_strikes(callback.from_user.id, -1)
            await add_cards_to_user(get_random_card(1), callback.from_user.id)

            msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–ª –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É!"
            tasks.append("take_card")

        msg = await callback.message.answer(msg_text, reply_markup=InlineButtons.do_strike_kb(tasks))

        await insert_lk_message_id(msg.message_id, callback.from_user.id)
    elif not purchased[0]:

        msg_text = f"–¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–±–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!\n" \
                   f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {free_info[1].split(':')[0]}—á {free_info[1].split(':')[1]}–º–∏–Ω" \
                   f" ‚è± –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"

        tasks.append("b3")
        tasks.append("back")

        await callback.message.edit_text(msg_text, reply_markup=InlineButtons.do_strike_kb(tasks))


async def main():

    await bot.delete_webhook(drop_pending_updates=True)

    await dp.start_polling(bot)

if __name__ == "__main__":

    asyncio.run(main())



