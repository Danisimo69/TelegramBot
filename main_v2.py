import logging
import uuid

from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InputMediaPhoto
from aiogram import F

from States.UserStates import *
from Filters.UserFilters import Has_One_Chan_Filter, Get_Buy_Message_Filter, Redact_Card_Filter, \
    Show_All_Cards_Filter
from Keyboards.UserKeyboards import InlineButtons
from Keyboards.AdminKeyboards import InlineButtons as AdminInlineKeyboard
from Modules.admin import get_user_transactions_info, select_all_promos, select_all_cards, delete_card_, delete_promo, \
    insert_promo_card, get_user_info, minus_promo_usages, add_card_to_user_by_card_id, place_promo, \
    check_promo_

from Modules.config import *
from Modules.lucky_strike import *
from main_config import token, CHANNEL_ID
from Modules.payment import quick_pay, check_payment
from Modules.penalti import *
from Modules.timers import *

logging.basicConfig(level=logging.INFO)
bot = Bot(token=token)
dp = Dispatcher()

CHANNEL_ID = CHANNEL_ID


async def is_subscribed(USER_ID):
    member = await bot.get_chat_member(CHANNEL_ID, USER_ID)
    if member.status not in ['left', 'kicked']:
        return True
    else:
        return False


async def get_username_by_id(tele_id):
    user = await bot.get_chat_member(CHANNEL_ID, tele_id)
    username = user.user.username
    return str(username)


@dp.message(Command("start"))
async def start_message(message: types.Message, state: FSMContext):

    # print("START")

    await state.clear()

    await clear_non_active_users()

    subs_status = await is_subscribed(message.from_user.id)
    spam_status = await check_spam(message.from_user.id)

    await bot.send_message(649811235, f"{message.from_user.id}, {subs_status}, {spam_status}")

    if not subs_status:

        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                             "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @offsidecard\n"
                             "2Ô∏è‚É£ –ù–∞–∂–∞—Ç—å –Ω–∞ /start", reply_markup=InlineButtons.start_kb__not_sub())

    elif not spam_status:

        await place_user_in_bd(message.from_user.id, message.from_user.username)
        await update_user_username(message.from_user.id, message.from_user.username)


        sent_msg = await message.answer("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                                        "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                                        "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                                        "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                                        "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                                        "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                                        "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: \n*¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                                        "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                                        reply_markup=InlineButtons.start_kb__sub(), parse_mode='Markdown')




@dp.callback_query(F.data == "menu")
async def back_to_menu(callback: types.CallbackQuery):
    await clear_non_active_users()
    await callback.message.edit_text("üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OFFSide*\n\n"
                                     "‚öΩÔ∏è –ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤ "
                                     "–∏–∑ –º–µ–¥–∏–∞—Ñ—É—Ç–±–æ–ª–∞ –∏ –∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã.\n\n"
                                     "üèÜ –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ "
                                     "–≤ –º–∏–Ω–∏-–∏–≥—Ä—ã! –ü—Ä–∏–æ–±—Ä–µ—Ç–∞–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä–∞—Ö, "
                                     "—á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏ –æ–±–æ–π—Ç–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π.\n\n"
                                     "–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ: \n*¬´‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è¬ª*\n\n"
                                     "–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ, —Ç–æ –Ω–∞–∂–∏–º–∞–π\n*¬´üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª*",
                                     reply_markup=InlineButtons.start_kb__sub(), parse_mode='Markdown')


@dp.callback_query(F.data == "info")
async def answer_info_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(text="–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç",
                                     reply_markup=InlineButtons.info_kb())


# —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@dp.callback_query(F.data[-5:] == "_info")
async def answer_questions(callback: types.CallbackQuery):
    if callback.data == "card_info":
        await callback.message.edit_text(
            "–ö–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —Å–≤–æ—é —Ä–µ–¥–∫–æ—Å—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ —Ç–≤–æ–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
            "1) –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 1000 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            "2) –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 500 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            "3) –≠–ø–∏—á–µ—Å–∫–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 250 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            "4) –ù–µ–æ–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 100 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n"
            "5) –û–±—ã—á–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: –ö–∞—Ä—Ç–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç 50 –±–∞–ª–ª–æ–≤ –∫ —Ç–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.\n\n",
            reply_markup=InlineButtons.back_to_info_kb())
    if callback.data == "penalti_info":
        await callback.message.edit_text("–ò–≥—Ä–∞ –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤ OFFSIDE, "
                                         "–≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–±–∏–≤–∞—Ç—å –∏ –æ—Ç–±–∏–≤–∞—Ç—å –º—è—á–∏.\n\n"
                                         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –ø–µ–Ω–∞–ª—å—Ç–∏, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                         "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                         "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚öΩÔ∏è –ü–µ–Ω–∞–ª—å—Ç–∏¬ª\n"
                                         "3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å.\n"
                                         "–ò–≥—Ä–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–º –¥–µ–ª–∞—Ç—å —É–¥–∞—Ä—ã. "
                                         "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –≤ —Ä–æ–ª–∏ –≤—Ä–∞—Ç–∞—Ä—è, –µ–≥–æ –∑–∞–¥–∞—á–∞: —Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—É—é —Ü–∏—Ñ—Ä—É,"
                                         " —á—Ç–æ–±—ã –ø—Ä—ã–≥–Ω—É—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É–≥–æ–ª –∏ –æ—Ç—Ä–∞–∑–∏—Ç—å —É–¥–∞—Ä. "
                                         "–î–∞–ª–µ–µ –≤—ã –º–µ–Ω—è–µ—Ç–µ—Å—å –º–µ—Å—Ç–∞–º–∏, —Ç–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø—è—Ç—å —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. "
                                         "–í –∏—Ç–æ–≥–µ, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–∏–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º—è—á–µ–π. "
                                         "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∏—á—å—è.\n\n"
                                         "–ó–∞ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É –∏–≥—Ä–æ–∫—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è  +25 –±–∞–ª–ª–æ–≤, –∞ –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç—Å—è -25 –±–∞–ª–ª–æ–≤. "
                                         "–í—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –¥–∞–µ—Ç—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 100. "
                                         "–ó–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –Ω–∏—á—å–µ–π —Ä–µ–π—Ç–∏–Ω–≥ —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.",
                                         reply_markup=InlineButtons.back_to_info_kb())
    if callback.data == "strike_info":
        await callback.message.edit_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä, –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                         "1. –ó–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª  ¬´üé≤ –ú–∏–Ω–∏-–∏–≥—Ä—ã¬ª\n"
                                         "2. –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É ¬´‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä¬ª\n"
                                         "3. –ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚öΩÔ∏è –°–¥–µ–ª–∞—Ç—å —É–¥–∞—Ä¬ª\n\n"
                                         "‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º.\n"
                                         "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É.\n"
                                         "–ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - –ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞.\n"
                                         "–í –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.\n"
                                         "–ï—Å–ª–∏ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ–∑–µ—Ç –∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ —É–¥–∞—Ä–æ–≤ –ø–æ –≤–æ—Ä–æ—Ç–∞–º - "
                                         "–º–æ–∂–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏.",
                                         reply_markup=InlineButtons.back_to_info_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'a –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
@dp.callback_query(F.data == "back")
async def return_to_lk(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await bot.answer_callback_query(callback.id)

    await calc_card_rating(callback.from_user.id)
    await cancel_trade(callback.from_user.id)

    user = await search_user_in_db(callback.from_user.id)

    stat_str = "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\nüÉè –°–æ–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: " + str(user.card_num) + "\n" \
                                                                                              "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: " + str(
        user.card_rating) + "\n\n" \
                            "‚öΩÔ∏è –†–µ–π—Ç–∏–Ω–≥ –≤ –∏–≥—Ä–µ –ü–µ–Ω–∞–ª—å—Ç–∏: " + str(user.penalty_rating)

    try:
        await callback.message.edit_text(stat_str,
                                         reply_markup=InlineButtons.back_lk_kb(await is_admin(callback.from_user.id)))
    except:
        await callback.message.delete()
        await callback.message.answer(stat_str,
                                      reply_markup=InlineButtons.back_lk_kb(await is_admin(callback.from_user.id)))


@dp.callback_query(F.data == "rate")
async def get_player_rating(callback: types.CallbackQuery):
    await calc_card_rating(callback.from_user.id)

    await callback.message.edit_text("–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!",
                                     reply_markup=InlineButtons.rate_kb())


@dp.callback_query(F.data[:5] == "rate_")
async def get_top_places(callback: types.CallbackQuery):
    num = 1
    ans_str = ""

    places = await get_user_places(callback.from_user.id)

    if callback.data == "rate_card":

        ans_str += "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–∞–º\n\n"

        card_top = (await get_top_places_())[0]
        for user in card_top:
            ans_str += ("ü•á" if str(num) == "1" else "ü•à" if str(num) == "2" else "ü•â" if str(num) == "3" else " " + str(
                num) + ".") + " @" + await get_username_by_id(user.tele_id) \
                       + " - " + str(user.card_rating) + "\n"
            num += 1
        if not (await user_in_top_ten(callback.from_user.id))[0]:
            user = await search_user_in_db(callback.from_user.id)
            ans_str += "\n" + str(places[0]) + ". @" + callback.from_user.username + \
                       " - " + str(user.card_rating)

    if callback.data == "rate_pen":
        ans_str += "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–µ–Ω–∞–ª—å—Ç–∏\n\n"

        penalti_top = (await get_top_places_())[1]
        for user in penalti_top:
            ans_str += ("ü•á" if str(num) == "1" else "ü•à" if str(num) == "2" else "ü•â" if str(num) == "3" else " " + str(
                num) + ".") + " @" + await get_username_by_id(user.tele_id) \
                       + " - " + str(user.penalty_rating) + "\n"
            num += 1
        if not (await user_in_top_ten(callback.from_user.id))[1]:
            user = await search_user_in_db(callback.from_user.id)
            ans_str += "\n" + str(places[1]) + ". @" \
                       + callback.from_user.username + \
                       " - " + str(user.penalty_rating)

    await callback.message.edit_text(ans_str, reply_markup=InlineButtons.back_kb())


@dp.callback_query(F.data == "coll")
async def get_collection(callback: types.CallbackQuery):
    user_cards = await get_user_card_list(callback.from_user.id)

    if user_cards == None:

        await callback.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ –≤–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞",
                                         reply_markup=InlineButtons.take_card_kb(have_cards=False))
    else:

        ans_str = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∫–∞—Ä—Ç: \n\n"

        await calc_card_rating(callback.from_user.id)

        for i in range(0, len(user_cards[0])):

            card_id = user_cards[0][i].card_id
            info = 0
            for j in user_cards[1]:
                if j["id"] == card_id:
                    info = j["count"]
                    break

            ans_str += str(user_cards[0][i].player_nickname) + " | " + "–†–µ–π—Ç–∏–Ω–≥: " + str(
                user_cards[0][i].points) + " | " + \
                       str(info) + " —à—Ç.\n"


        await callback.message.delete()
        msg = await callback.message.answer(ans_str, reply_markup=InlineButtons.take_card_kb(have_cards=True))




# –≤—ã–∑–æ–≤ –º–∏–Ω–∏-–∏–≥—Ä
@dp.callback_query(F.data == "games")
async def get_mini_games(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–¢—É—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∏–Ω–∏-–∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –∏–∑ –≤–∞—Å –ª—É—á—à–∏–πü•á",
        reply_markup=InlineButtons.games_kb())


@dp.callback_query(F.data == "penalti")
async def penalti_message(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)

    if not await user_in_game(callback.from_user.id):
        await callback.message.edit_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏",
            reply_markup=InlineButtons.back_kb())
        await state.set_state(UserState.get_username_for_pen.state)
    else:
        await callback.message.edit_text("–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∏–≥—Ä–µ, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –µ–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é",
                                         reply_markup=InlineButtons.back_kb())


@dp.callback_query(F.data == "lucky_strike")
async def lucky_strike(callback: types.CallbackQuery):
    msg = await callback.message.edit_text("‚òòÔ∏è –£–¥–∞—á–Ω—ã–π —É–¥–∞—Ä - —ç—Ç–æ –º–∏–Ω–∏-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –¥–µ–ª–∞–µ—à—å 1 —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º. "
                                           "–ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ—à—å - –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —Ä–∞–Ω–¥–æ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É. –ï—Å–ª–∏ –Ω–µ –∑–∞–±–∏–≤–∞–µ—à—å - "
                                           "–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è",
                                           reply_markup=InlineButtons.lucky_strike_kb())



# —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã —É–¥–∞—á–Ω—ã–π —É–¥–∞—Ä
@dp.callback_query(F.data == "do_strike")
async def do_strike(callback: types.CallbackQuery):
    await callback.message.delete()

    free_info = await check_free_strike(callback.from_user.id)
    purchased = await check_purchased_strikes(callback.from_user.id)

    tasks = []

    if free_info[0] or purchased[0]:
        msg = await callback.message.answer_dice('‚öΩÔ∏è')
        await asyncio.sleep(4)
        if msg.dice.value < 3:

            await update_user_strikes(callback.from_user.id, -1)

            if not purchased[0] or purchased[1] == 1:
                msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"
                tasks.append("b3")
            else:
                msg_text = f"‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ —Å–µ–π—á–∞—Å —Ç–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æüòî\n" \
                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫ - {purchased[1] - 1}"
                tasks.append("no_b3")

            tasks.append("back")

        else:
            await update_user_strikes(callback.from_user.id, -1)
            await add_cards_to_user(await get_random_card(1, "lucky_strike"), callback.from_user.id)

            msg_text = "‚òòÔ∏è –¢—ã –∏—Å–ø—ã—Ç–∞–ª —É–¥–∞—á—É –∏ –≤—ã–∏–≥—Ä–∞–ª –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É!"
            tasks.append("take_card")

        msg = await callback.message.answer(msg_text, reply_markup=InlineButtons.do_strike_kb(tasks))


    elif not purchased[0]:

        msg_text = f"–¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–±–æ–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!\n" \
                   f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {free_info[1].split(':')[0]}—á {free_info[1].split(':')[1]}–º–∏–Ω" \
                   f" ‚è± –∏–ª–∏ –ø–æ–ª—É—á–∏ 3 —É–¥–∞—Ä–∞ –∑–∞ 100 —Ä—É–±–ª–µ–π!"

        tasks.append("b3")
        tasks.append("back")

        await callback.message.answer(msg_text, reply_markup=InlineButtons.do_strike_kb(tasks))


@dp.callback_query(F.data == "cont_off")
async def continue_offer(callback: types.CallbackQuery):
    await bot.answer_callback_query(callback.id)

    await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å—Å—è")

    # bot.register_next_step_handler(callback.message, get_offer_to_user)


@dp.callback_query(F.data == "getcar")
async def get_cards(callback: types.CallbackQuery):
    # bot.clear_step_handler_by_chat_id(callback.from_user.id)

    product_str = "üÉè –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, —Ç–æ —Ç—ã –ø–æ–ø–∞–ª –∫—É–¥–∞ –Ω–∞–¥–æ!\n\n" \
                  "–†–∞–∑ –≤ 24 —á–∞—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, " \
                  "–Ω–æ –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö" \
                  " –∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–±–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç üõç"

    await callback.message.edit_text(text=product_str, reply_markup=InlineButtons.getcar_kb())


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
@dp.callback_query(F.data == "store")
async def get_card_shop(callback: types.CallbackQuery):
    await callback.message.edit_text(text="üõç –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∫–∞—Ä—Ç, —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
                                          "üí∞ –û–¥–Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - 70 —Ä—É–±–ª–µ–π\n"
                                          "üí∞ –¢—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ - 190 —Ä—É–±–ª–µ–π\n"
                                          "üí∞ –ü—è—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ - 275 —Ä—É–±–ª–µ–π",
                                     reply_markup=InlineButtons.store_kb())


@dp.callback_query(F.data == "input")
async def wait_promo(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µ", reply_markup=InlineButtons.back_to_getcar_kb())
    await state.set_state(UserState.check_promo.state)


@dp.callback_query(F.data[:13] == "my_collection")
async def my_collection(callback: types.CallbackQuery, state: FSMContext):
    try:
        dat = callback.data.split(":")[-1]
    except:
        dat = ""

    try:
        await callback.message.edit_text(
            "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏" if dat != "chan" else "üß≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
            , reply_markup=InlineButtons.collection_kb(False if dat != "chan" else True))
    except:
        await callback.message.delete()
        await callback.message.answer(
            "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏" if dat != "chan" else "üß≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
            reply_markup=InlineButtons.collection_kb(False if dat != "chan" else True))


@dp.callback_query(F.data[:9] == "rare_mode")
async def rare_mode_my_collection(callback: types.CallbackQuery, state: FSMContext):
    cards = await search_user_cards(callback.from_user.id, "Up")
    trade_status = callback.data.split(":")[-1]

    buttons = []

    used = []
    for card in cards:

        if card.rareness == 0 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–û–±—ã—á–Ω—ã–µ",
                            "callback_data": "rare_by_0:0" if trade_status == "None" else "chan_rare_by_0:0"})

        elif card.rareness == 5 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–†–µ–¥–∫–∏–µ",
                            "callback_data": "rare_by_0:5" if trade_status == "None" else "chan_rare_by_0:5"})

        elif card.rareness == 1 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–ù–µ–æ–±—ã—á–Ω—ã–µ",
                            "callback_data": "rare_by_0:1" if trade_status == "None" else "chan_rare_by_0:1"})

        elif card.rareness == 2 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–≠–ø–∏—á–µ—Å–∫–∏–µ",
                            "callback_data": "rare_by_0:2" if trade_status == "None" else "chan_rare_by_0:2"})

        elif card.rareness == 3 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ",
                            "callback_data": "rare_by_0:3" if trade_status == "None" else "chan_rare_by_0:3"})

        elif card.rareness == 4 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ",
                            "callback_data": "rare_by_0:4" if trade_status == "None" else "chan_rare_by_0:4"})

        elif card.rareness == 6 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ",
                            "callback_data": "rare_by_0:6" if trade_status == "None" else "chan_rare_by_0:6"})

        elif card.rareness == 7 and card.rareness not in used:
            used.append(card.rareness)
            buttons.append({"text": "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ",
                            "callback_data": "rare_by_0:7" if trade_status == "None" else "chan_rare_by_0:7"})

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç", reply_markup=InlineButtons.rare_mode_kb(buttons))


@dp.callback_query(F.data[:8] == "rare_by_")
async def rare_sort(callback: types.CallbackQuery, state: FSMContext):
    rarity = int(callback.data.split(":")[-1])
    card_list = await search_user_cards(callback.from_user.id, None, rarity)
    card_num = len(card_list)

    tasks = []
    add_data = {}

    num = int(callback.data.split(":")[0].replace("rare_by_", ""))

    add_data['<<<'] = f"rare_by_0:{rarity}"
    add_data['<<'] = "rare_by_" + str(num - 1) + ":" + str(rarity)
    add_data['>>'] = "rare_by_" + str(num + 1) + ":" + str(rarity)
    add_data['>>>'] = f"rare_by_{len(card_list) - 1}" + ":" + str(rarity)

    add_data['num1_text'] = '(' + str(num + 1) + '/' + str(card_num) + ')'
    add_data['num1_data'] = "..."

    rareness = get_rareness_by_num(rarity)

    caption_str = str(card_list[num].player_name) + " *" + str(card_list[num].player_nickname) \
                  + "*\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_list[num].points) \
                  + "*\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rareness \
                  + "*\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_list[num].team) + "*\n"

    if len(card_list) == 1:
        tasks.append("num1")
        tasks.append("num1_not_chan")

        # print(tasks, add_data)

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == 0:

        tasks.append("num0")
        tasks.append("num0_not_chan")

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == len(card_list) - 1:
        tasks.append("num_len-1")
        tasks.append("num_len-1_not_chan")

    else:
        tasks.append("num_else")
        tasks.append("num_else_not_chan")

    await callback.message.edit_media(caption=caption_str,
                                      media=InputMediaPhoto(media=str(card_list[num].photo_id), caption=caption_str,
                                                            parse_mode='Markdown'),
                                      reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data))


@dp.callback_query(F.data[:13] == "chan_rare_by_")
async def rare_sort_1(callback: types.CallbackQuery, state: FSMContext):
    rarity = int(callback.data.split(":")[-1])
    card_list = await search_user_cards(callback.from_user.id, None, rarity)
    card_num = len(card_list)

    tasks = []
    add_data = {}

    num = int(callback.data.split(":")[0].replace("chan_rare_by_", ""))

    tasks.append("–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞")
    add_data['–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞'] = "offer_" + str(card_list[num].card_id)

    add_data['<<<'] = f"chan_rare_by_0:{rarity}"
    add_data['<<'] = "chan_rare_by_" + str(num - 1) + ":" + str(rarity)
    add_data['>>'] = "chan_rare_by_" + str(num + 1) + ":" + str(rarity)
    add_data['>>>'] = f"chan_rare_by_{len(card_list) - 1}" + ":" + str(rarity)

    add_data['num1_text'] = '(' + str(num + 1) + '/' + str(card_num) + ')'
    add_data['num1_data'] = "..."

    rareness = get_rareness_by_num(rarity)

    caption_str = str(card_list[num].player_name) + " *" + str(card_list[num].player_nickname) \
                  + "*\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_list[num].points) \
                  + "*\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rareness \
                  + "*\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_list[num].team) + "*\n"

    if len(card_list) == 1:
        tasks.append("num1")
        tasks.append("num1_chan")

        # print(tasks, add_data)

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == 0:

        tasks.append("num0")
        tasks.append("num0_chan")

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == len(card_list) - 1:
        tasks.append("num_len-1")
        tasks.append("num_len-1_chan")

    else:
        tasks.append("num_else")
        tasks.append("num_else_chan")

    await callback.message.edit_media(caption=caption_str,
                                      media=InputMediaPhoto(media=str(card_list[num].photo_id), caption=caption_str,
                                                            parse_mode='Markdown'),
                                      reply_markup=InlineButtons.show_card_by_rare_kb(tasks, add_data))


@dp.callback_query(Has_One_Chan_Filter())
async def show_card_one_by_one(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        sorting = data['sorting']
    except:
        # traceback.print_exc()
        sorting = None

    local_sort = 22

    if "sort_rate" in callback.data:
        match sorting:

            case "Down":
                local_sort = "Up"
            case "Up":
                local_sort = None
            case None:
                local_sort = "Down"

    # print(sorting, local_sort)

    card_list = await search_user_cards(callback.from_user.id, sorting if local_sort == 22 else local_sort)

    if len(card_list) == 0:
        await callback.message.edit_text(text="–í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–∞",
                                         reply_markup=InlineButtons.take_card_kb())
        return

    tasks = []
    add_data = {}

    match sorting:

        case "Down":
            if local_sort == 22:
                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨áÔ∏è",
                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Up")


            else:

                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨ÜÔ∏è",

                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Up")

        case "Up":

            if local_sort == 22:
                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨ÜÔ∏è",
                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting=None)
            else:

                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚ùå",

                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting=None)

        case None:

            if local_sort == 22:
                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚ùå",
                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Down")

            else:
                tasks.append("sort_button")
                add_data["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨áÔ∏è",
                                           "callback_data": "{}:sort_rate".format(
                                               "one_by_0" if "one_" in callback.data else "chan_by_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Down")

    if callback.data.split("_")[0] != "chan":
        num = int(callback.data.split(":")[0].replace("one_by_", ""))

    else:
        num = int(callback.data.split(":")[0].replace("chan_by_", ""))

    card_num = (await search_user_in_db(callback.from_user.id)).card_num

    if callback.data.split("_")[0] != "chan":

        add_data['<<<'] = "one_by_0"
        add_data['<<'] = "one_by_" + str(num - 1)
        add_data['>>'] = "one_by_" + str(num + 1)
        add_data['>>>'] = f"one_by_{len(card_list) - 1}"

    else:
        tasks.append("–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞")
        add_data['–í—ã–±—Ä–∞—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞'] = "offer_" + str(card_list[num].card_id)
        add_data['<<<'] = "chan_by_0"
        add_data['<<'] = "chan_by_" + str(num - 1)
        add_data['>>'] = "chan_by_" + str(num + 1)
        add_data['>>>'] = f"chan_by_{len(card_list) - 1}"

    add_data['num1_text'] = '(' + str(num + 1) + '/' + str(card_num) + ')'
    add_data['num1_data'] = "..."

    rareness = get_rareness_by_num(card_list[num].rareness)

    caption_str = str(card_list[num].player_name) + " *" + str(card_list[num].player_nickname) \
                  + "*\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_list[num].points) + "*" \
                  + "\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rareness + "*" \
                  + "\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_list[num].team) + "*\n"

    if len(card_list) == 1:
        tasks.append("num1")

        if callback.data.split("_")[0] != "chan":
            tasks.append("num1_not_chan")
        else:
            tasks.append("num1_chan")

        # print(tasks, add_data)

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_one_by_one_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == 0:

        tasks.append("num0")
        if callback.data.split("_")[0] != "chan":
            tasks.append("num0_not_chan")
        else:
            tasks.append("num0_chan")

        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id, card_list[num].photo_id,
                                       reply_markup=InlineButtons.show_card_one_by_one_kb(tasks, add_data),
                                       caption=caption_str, parse_mode='Markdown')

            return

    elif num == len(card_list) - 1:
        tasks.append("num_len-1")
        if callback.data.split("_")[0] != "chan":
            tasks.append("num_len-1_not_chan")
        else:
            tasks.append("num_len-1_chan")

    else:
        tasks.append("num_else")
        if callback.data.split("_")[0] != "chan":
            tasks.append("num_else_not_chan")
        else:
            tasks.append("num_else_chan")

    await callback.message.edit_media(
        media=InputMediaPhoto(media=str(card_list[num].photo_id), caption=caption_str, parse_mode='Markdown'),
        reply_markup=InlineButtons.show_card_one_by_one_kb(tasks, add_data))


@dp.callback_query(F.data[:6] == "offer_")
async def insert_card_to_offer(callback: types.CallbackQuery, state: FSMContext):
    card_id = int(callback.data.replace("offer_", ""))

    bool_pl = await second_user_had_card(callback.from_user.id)

    if not await is_offer_defined(callback.from_user.id):
        # bot.clear_step_handler_by_chat_id(callback.from_user.id)

        await create_new_change_offer(callback.from_user.id, card_id)

        await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username), —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å—Å—è")
        await state.set_state(UserState.get_second_user_for_offer.state)


    elif bool_pl != -1 and not bool_pl:
        await add_card_to_offer(callback.from_user.id, card_id)

        await callback.message.delete()
        msg = await callback.message.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ")

        user_id = await get_first_user(callback.from_user.id)
        card = await get_trade_card(user_id, 1)
        card1 = await get_trade_card(user_id, 0)

        await bot.send_photo(chat_id=user_id, photo=card.photo_id,
                             caption="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞!\n"
                                     "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞ –≤–∞—à—É:\n" + card1.player_name + " aka " + card1.player_nickname + "\n" +
                                     "–° —Ä–µ–¥–∫–æ—Å—Ç—å—é - " + get_rareness_by_num(card1.rareness),
                             reply_markup=InlineButtons.insert_card_to_offer_kb())


# —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã –≤ –ø–µ–Ω–∞–ª—å—Ç–∏
@dp.callback_query(F.data[:4] == "pen_")
async def penalti_game(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "pen_canc":
        await bot.answer_callback_query(callback.id)

        res = await delete_game(callback.from_user.id)
        msg = await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∏–≥—Ä—É –≤ –ø–µ–Ω–∞–ª—å—Ç–∏",
                                               reply_markup=InlineButtons.pen_canc_kb())

        msg = await bot.send_message(chat_id=res[0],
                                     text=f"‚ùå @{await get_username_by_id(res[1])} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã",
                                     reply_markup=InlineButtons.pen_canc_kb())

        return

    if callback.data == "pen_start":
        await callback.message.delete()
        await bot.answer_callback_query(callback.id)

        await start_game(callback.from_user.id)
        kicker_id = await get_kicker(callback.from_user.id)

        print(kicker_id)

        # await bot.send_message("–î–æ")

        await bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile('images/keeper.png'),
                             caption="–í—ã–±–µ—Ä–∏ —Å—Ç–æ—Ä–æ–Ω—É –∫—É–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å",
                             reply_markup=InlineButtons.pen_start_kb())

        await bot.send_photo(chat_id=kicker_id, photo=FSInputFile('images/keeper.png'),
                             caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞—Ä–∏—Ç—å",
                             reply_markup=InlineButtons.pen_start_kb())
    else:

        await callback.message.edit_reply_markup(reply_markup=None)
        # print(callback.data)


        res = await check_def_and_kicker_status(callback.from_user.id)

        if not res[1] and not res[0]: # not (await kicker_status(callback.from_user.id)) and not (await check_def_status(callback.from_user.id)):

            await callback.message.edit_reply_markup(reply_markup=InlineButtons.pen_else_kb())
            await callback.answer("–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª —É–¥–∞—Ä.", show_alert=True)

        elif not res[1] and res[0]: # (await check_def_status(callback.from_user.id)) and not (await kicker_status(callback.from_user.id)):

            num = callback.data.replace("pen_", "")

            await place_turn_in_db(callback.from_user.id, num)
            await change_kicker(callback.from_user.id)

            res = await is_scored(callback.from_user.id)

            scores = await get_score_str(callback.from_user.id)
            # print(scores)

            keeper_text = None

            if res[0]:
                kicker_text = f"‚öΩÔ∏è –ì–û–õ!!!\n@{await get_username_by_id(res[1])} –ø—Ä—ã–≥–Ω—É–ª –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
                keeper_text = f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª\n@{await get_username_by_id(res[2])} –±–∏–ª –≤ –¥—Ä—É–≥–æ–π —É–≥–æ–ª\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"
            elif res[1] != -1:
                kicker_text = f"‚ùå –£–≤—ã —Ç—ã –Ω–µ –∑–∞–±–∏–ª\n@{await get_username_by_id(res[1])} —É–≥–∞–¥–∞–ª —Ç–≤–æ–π —É–¥–∞—Ä\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
                keeper_text = f"üèÜ –¢—ã –æ—Ç–±–∏–ª —É–¥–∞—Ä\n@{await get_username_by_id(res[2])} –±–∏–ª –≤ —Ç–æ—Ç –∂–µ —É–≥–æ–ª\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"

            scores = [scores[0].replace("\U0000231B", ""), scores[1].replace("\U0000231B", "")]
            finish = await check_finish_game_penalti(callback, res, scores)

            try:
                keeper_id = res[1]
                kicker_id = res[2]
            except:
                print("–û—à–∏–±–∫–∞")


            if not finish:
                try:
                    await bot.send_message(kicker_id, kicker_text)

                except UnboundLocalError as err:

                    print("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–Ω—å—à–µ –µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                    print(err)

                if keeper_text:
                    await callback.message.edit_caption(caption=f"–í–∞—à –≤—ã–±–æ—Ä - {num}", reply_markup=None)
                    await bot.send_message(keeper_id, keeper_text)
                    # await change_kicker(res[2])
                    await bot.send_photo(kicker_id, FSInputFile('images/keeper.png'),
                                         caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å",
                                         reply_markup=InlineButtons.pen_else_kb())
                    await bot.send_photo(keeper_id, FSInputFile('images/keeper.png'),
                                         caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞—Ä–∏—Ç—å",
                                         reply_markup=InlineButtons.pen_else_kb())
                    return

            else:

                await callback.message.edit_caption(caption=f"–í–∞—à –≤—ã–±–æ—Ä - {num}", reply_markup=None)
                # print("change")
                # await change_def_status(callback.from_user.id)



        # elif not (await kicker_status(callback.from_user.id)):
        #     #             print("asdasdww")
        #     await callback.answer("–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª —É–¥–∞—Ä.", show_alert=True)

        else:

            await set_kick_time(callback.from_user.id)
            num = callback.data.replace("pen_", "")
            await callback.message.edit_caption(caption=f"–í–∞—à –≤—ã–±–æ—Ä - {num}\n–û–∂–∏–¥–∞–π—Ç–µ —Ö–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
                                                reply_markup=None)
            # print(num)

            await place_turn_in_db(callback.from_user.id, num)
            print(f"Turn {callback.from_user.id}")

            res = await is_scored(callback.from_user.id)
            print(f"is scored {callback.from_user.id}")
            scores = await get_score_str(callback.from_user.id)
            #             print(scores)

            keeper_text = None

            if res[0]:
                kicker_text = f"‚öΩÔ∏è –ì–û–õ!!!\n@{await get_username_by_id(res[1])} –ø—Ä—ã–≥–Ω—É–ª –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
                keeper_text = f"‚ùå –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≥–æ–ª\n@{await get_username_by_id(res[2])} –±–∏–ª –≤ –¥—Ä—É–≥–æ–π —É–≥–æ–ª\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"
            elif res[1] != -1:
                kicker_text = f"‚ùå –£–≤—ã —Ç—ã –Ω–µ –∑–∞–±–∏–ª\n@{await get_username_by_id(res[1])} —É–≥–∞–¥–∞–ª —Ç–≤–æ–π —É–¥–∞—Ä\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[0]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[1]}"
                keeper_text = f"üèÜ –¢—ã –æ—Ç–±–∏–ª —É–¥–∞—Ä\n@{await get_username_by_id(res[2])} –±–∏–ª –≤ —Ç–æ—Ç –∂–µ —É–≥–æ–ª\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–∏—Ö —É–¥–∞—Ä–æ–≤:\n{scores[1]}\n" \
                              f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:\n{scores[0]}"

            scores = [scores[0].replace("\U0000231B", ""), scores[1].replace("\U0000231B", "")]
            finish = await check_finish_game_penalti(callback, res, scores)
            if not finish:
                try:
                    await bot.send_message(res[1], kicker_text)

                except UnboundLocalError as err:

                    print("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–Ω—å—à–µ –µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
                    print(err)

                if keeper_text:
                    await bot.send_message(res[2], keeper_text)
                    await change_kicker(res[2])
                    await bot.send_photo(res[1], FSInputFile('images/keeper.png'),
                                         caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –ø—Ä—ã–≥–Ω—É—Ç—å",
                                         reply_markup=InlineButtons.pen_else_kb())
                    await bot.send_photo(res[2], FSInputFile('images/keeper.png'),
                                         caption="–í—ã–±–µ—Ä–∏ —É–≥–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞—Ä–∏—Ç—å",
                                         reply_markup=InlineButtons.pen_else_kb())
                    return

                # print("change")
                await change_def_status(callback.from_user.id)

            else:

                await callback.message.edit_caption(caption=f"–í–∞—à –≤—ã–±–æ—Ä - {num}", reply_markup=None)


# —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Å–∞–º–æ–º –±–æ—Ç–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
async def check_finish_game_penalti(callback: types.CallbackQuery, res: list, scores: list):
    finished = await is_finished(callback.from_user.id)
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if finished == -1:
        error_str = "–í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ–∞–Ω—Å –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω"
        msg = await bot.send_message(chat_id=callback.from_user.id,
                                     text=error_str, reply_markup=InlineButtons.pen_canc_kb())
        msg = await bot.send_message(chat_id=await get_second_user(callback.from_user.id), text=error_str,
                                     reply_markup=InlineButtons.pen_canc_kb())
        await delete_game(callback.from_user.id)
        return True
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    if finished:
        game_res = await finish_game(callback.from_user.id)
        if game_res[0] == 0:

            draw_str = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{await get_username_by_id(res[2])}:\n{scores[0]}\n" \
                       f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{await get_username_by_id(res[1])}:\n{scores[1]}\n" \
                       f"üèÜ –í—ã –∑–∞–±–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤! " \
                       f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫—É –∏–ª–∏ –∂–µ –Ω–∏—á—å—é, –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏!"

            msg = await bot.send_message(res[1], text=draw_str, reply_markup=InlineButtons.pen_finished_0_kb())
            msg = await bot.send_message(res[2], text=draw_str, reply_markup=InlineButtons.pen_finished_0_kb())

        else:

            fin_str = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{await get_username_by_id(res[2])}:\n{scores[0]}\n" \
                      f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–¥–∞—Ä–æ–≤ @{await get_username_by_id(res[1])}:\n{scores[1]}\n" \
                      f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - @{await get_username_by_id(game_res[1])}"
            msg = await bot.send_message(
                game_res[2], text=fin_str, reply_markup=InlineButtons.pen_finished_1_kb())
            msg = await bot.send_message(
                game_res[1], text=fin_str, reply_markup=InlineButtons.pen_finished_1_kb())

        await delete_game(callback.from_user.id)
        return True
    return False


@dp.callback_query(F.data[:5] == "trade")
async def call_trade(callback: types.CallbackQuery):
    if callback.data == "trade_canc":
        trade_id = await cancel_trade(callback.from_user.id)

        if trade_id[0] == 0:
            await callback.message.delete()
            msg = await bot.send_message(callback.from_user.id,
                                         "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=InlineButtons.call_trade_kb())

            if trade_id[1] != 0:
                msg = await bot.send_message(trade_id[1], "‚ùå –û–±–º–µ–Ω –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω",
                                             reply_markup=InlineButtons.call_trade_kb())
            return

        if trade_id[0] != callback.from_user.id:
            await callback.message.delete()
            msg = await bot.send_message(trade_id[0], "‚ùå –£–≤—ã, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.",
                                         reply_markup=InlineButtons.call_trade_kb())
            msg1 = await bot.send_message(
                trade_id[1], "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=InlineButtons.call_trade_kb())
        else:
            await callback.message.delete()
            msg = await bot.send_message(
                chat_id=trade_id[1], text="‚ùå –£–≤—ã, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.", reply_markup=InlineButtons.call_trade_kb())
            msg1 = await bot.send_message(
                trade_id[0], "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ–±–º–µ–Ω!", reply_markup=InlineButtons.call_trade_kb())


    if callback.data == "trade":
        await callback.message.delete()
        trade_id = await do_trade(callback.from_user.id)

        if trade_id[0] != callback.from_user.id:
            msg = await bot.send_message(trade_id[0], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                         reply_markup=InlineButtons.call_trade_kb())
            msg1 = await bot.send_message(trade_id[1], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                          reply_markup=InlineButtons.call_trade_kb())
        else:
            msg = await bot.send_message(trade_id[1], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                         reply_markup=InlineButtons.call_trade_kb())
            msg1 = await bot.send_message(trade_id[0], "‚úÖ C–¥–µ–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é",
                                          reply_markup=InlineButtons.call_trade_kb())


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(Get_Buy_Message_Filter())
async def get_buy_message(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "0":
        await check_pay(callback, state)

    else:
        await clear_user_transaction(callback.from_user.id)
        operation_id = str(uuid.uuid4())
        redirect_uri = await quick_pay("buy cards", await get_price(int(callback.data)), operation_id)

        if int(callback.data) != 4:
            await place_operation_in_db(
                callback.from_user.id, operation_id, callback.data)
        else:
            await place_operation_in_db(
                callback.from_user.id, operation_id, callback.data)

        await callback.message.edit_text("–í–∞—à –∑–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω\n–û–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
                                         reply_markup=InlineButtons.get_buy_message_kb(redirect_uri))


@dp.callback_query(F.data == "check_pay")
async def check_pay(callback: types.CallbackQuery, state: FSMContext):
    free_card = await check_free_card(callback.from_user.id)

    print([callback.data, free_card])

    if callback.data == "0" and free_card[0]:

        await callback.message.delete()

        random_card = await get_random_card(1, "random_card")

        await add_cards_to_user(random_card, callback.from_user.id)
        await push_free_card_date(callback.from_user.id)

        await set_get_msg(callback.from_user.id, 0)
        await get_new_cards(callback, state)

    elif callback.data == "0" and not free_card[0]:

        await callback.message.delete()

        ans = free_card[1].split(":")
        # –∏–∑–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –Ω–∏–∂–µ
        ans_str = ans[0] + "—á " + ans[1] + "–º–∏–Ω ‚è±Ô∏è"

        await callback.message.answer("–¢—ã –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–ª —Å–≤–æ—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É! "
                                      "–°–ª–µ–¥—É—é—â—É—é —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ " + ans_str + ". "
                                                                                        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∂–¥–∞—Ç—å - –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!",
                                      reply_markup=InlineButtons.card_shop_kb())

    elif callback.data != "0":

        print(callback.data)
        operation = await get_active_transaction(callback.from_user.id)
        operation_id = operation.operation_id
        if await check_payment(operation_id):

            await callback.message.delete()

            # –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ
            await save_transaction(callback.from_user.id)
            product_id = int(operation.operation_name)
            if int(product_id) == 1:
                card_num = 1
            if int(product_id) == 2:
                card_num = 3
            if int(product_id) == 3:
                card_num = 5
            if int(product_id) == 4:
                await update_user_strikes(callback.from_user.id, 1)

                await callback.message.answer("–£—Å–ø–µ—à–Ω–æ ‚úÖ, –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É–¥–∞—Ä—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã –≤–∞–º,"
                                              "–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É!", reply_markup=InlineButtons.mini_games_kb())
                return

            await add_cards_to_user((await get_random_card(card_num, "random_card")), callback.from_user.id)

            await plus_user_transactions(callback.from_user.id)

            await callback.message.answer("–£—Å–ø–µ—à–Ω–æ ‚úÖ, –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑", reply_markup=InlineButtons.get_cards_kb())

        else:

            await bot.answer_callback_query(callback.id)

            # await callback.message.answer("–£—Å–ø–µ—à–Ω–æ ‚úÖ, –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑", reply_markup=InlineButtons.get_cards_kb())


# –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–±–æ—Ä–∞
@dp.callback_query(F.data == "get_new_cards")
async def get_new_cards(callback: types.CallbackQuery, state: FSMContext):

    card_info = await get_last_cards(callback.from_user.id)
    # print(card_info)
    if card_info[1] >= 1:
        rare = get_rareness_by_num(card_info[0][0].rareness)

        ans = str(card_info[0][0].player_name) + " aka " + str(card_info[0][0].player_nickname) \
              + "\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_info[0][0].points) + "*" \
              + "\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rare + "*" \
              + "\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_info[0][0].team) + "*" + "\n"

        cards_len = len(card_info[0])
        add_data = {}

        if card_info[1] == 1:
            markup = InlineButtons.show_new_card_kb(True)
        else:

            add_data['format'] = "first"  # ... | last
            add_data['card_number'] = 1
            add_data['cards'] = cards_len

            markup = InlineButtons.show_new_card_kb(False, add_data)
            await state.update_data(cards=card_info[0],
                                    card_number=0)

        await bot.answer_callback_query(callback.id)

        try:
            await callback.message.delete()
        except:
            pass

        await bot.send_photo(callback.from_user.id, card_info[0][0].photo_id, caption=ans, parse_mode="Markdown",
                             reply_markup=markup)

    else:



        await return_to_lk(callback, state)

        # await callback.message.edit_text( text="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫", reply_markup=InlineButtons.get_second_user_for_offer_kb())


@dp.callback_query(F.data[:18] == "slide_bought_cards")
async def slide_bought_cards(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    action = callback.data.split(":")[-1]
    add_data = {}

    cards = data['cards']

    if action == "first":
        card_number = 0
        await state.update_data(card_number=0)

        add_data['format'] = "first"
        add_data['card_number'] = card_number + 1
        add_data['cards'] = len(cards)

        markup = InlineButtons.show_new_card_kb(False, add_data)

    elif action == "nothing":
        await bot.answer_callback_query(callback.id)
        return

    elif action == "next":
        card_number = data['card_number'] + 1
        await state.update_data(card_number=card_number)

        if card_number + 1 == len(cards):
            add_data['format'] = "last"
        else:
            add_data['format'] = "..."
        add_data['card_number'] = card_number + 1
        add_data['cards'] = len(cards)

        markup = InlineButtons.show_new_card_kb(False, add_data)

    elif action == "previous":
        card_number = data['card_number'] - 1
        await state.update_data(card_number=card_number)

        if card_number == 0:
            add_data['format'] = "first"
        else:
            add_data['format'] = "..."

        add_data['card_number'] = card_number + 1
        add_data['cards'] = len(cards)

        markup = InlineButtons.show_new_card_kb(False, add_data)

    elif action == "last":
        card_number = len(cards) - 1

        await state.update_data(card_number=len(cards) - 1)

        add_data['format'] = "last"
        add_data['card_number'] = len(cards)
        add_data['cards'] = len(cards)

        markup = InlineButtons.show_new_card_kb(False, add_data)

    print(card_number)

    rare = get_rareness_by_num(cards[card_number].rareness)

    ans = str(cards[card_number].player_name) + " aka " + str(cards[card_number].player_nickname) \
          + "\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(cards[card_number].points) + "*" \
          + "\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + rare + "*" \
          + "\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(cards[card_number].team) + "*" + "\n"

    await callback.message.edit_media(
        media=InputMediaPhoto(media=str(cards[card_number].photo_id), caption=ans, parse_mode='Markdown'),
        reply_markup=markup)


@dp.callback_query(F.data == "admin")
async def get_admin(callback: types.CallbackQuery):
    # bot.clear_step_handler_by_chat_id(callback.from_user.id)

    try:
        await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å\n"
                                         "–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
                                         reply_markup=AdminInlineKeyboard.get_admin_kb())
    except:
        await callback.message.delete()
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å\n"
                                      "–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å",
                                      reply_markup=AdminInlineKeyboard.get_admin_kb())


@dp.callback_query(F.data[:6] == "admin_")
async def admin_sections(callback: types.CallbackQuery):
    # bot.clear_step_handler_by_chat_id(callback.from_user.id)

    section = callback.data.split("_")[1]

    tasks = []
    add_data = {}

    if section != "users":

        add_data['section'] = section
        tasks.append("not_section")

        if section == "card":
            tasks.append("card")
            await callback.message.edit_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏!\n"
                                             "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                                             reply_markup=AdminInlineKeyboard.admin_sections_kb(tasks, add_data))
        else:
            tasks.append("not_card")
            await callback.message.edit_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏!\n"
                                             "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
                                             reply_markup=AdminInlineKeyboard.admin_sections_kb(tasks, add_data))
    else:
        tasks.append("section")
        await callback.message.edit_text("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!\n"
                                         "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å",
                                         reply_markup=AdminInlineKeyboard.admin_sections_kb(tasks, add_data))


@dp.callback_query(F.data[:8] == "get_user")
async def users_processing(callback: types.CallbackQuery, state: FSMContext):
    # bot.clear_step_handler_by_chat_id(callback.from_user.id)

    if callback.data == "get_user":
        await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
                                         "–æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                                         reply_markup=AdminInlineKeyboard.users_processing_kb())
        await state.set_state(UserState.get_username_for_admin.state)
        return
    if "get_user_hist" in callback.data:
        user_id = int(callback.data.split("_")[3])
        ans_str = await get_user_transactions_info(
            user_id, await get_username_by_id(user_id))
        await callback.message.edit_text(text=ans_str, reply_markup=AdminInlineKeyboard.users_processing_kb())


@dp.callback_query(Redact_Card_Filter())
async def redact_card(callback: types.CallbackQuery, state: FSMContext):
    # bot.clear_step_handler_by_chat_id(callback.from_user.id)

    msg_id = callback.message.message_id
    card = (await get_card_by_id(int(callback.data.split("_")[0])))[0]
    new_caption = card + \
                  "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n" \
                  "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n" \
                  "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ"
    if callback.message.caption:
        new_caption = callback.message.caption + "\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n" \
                                                 "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n" \
                                                 "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ"
    await bot.edit_message_caption(chat_id=callback.from_user.id, message_id=msg_id, caption=new_caption)

    await state.update_data(card_id=int(callback.data.split("_")[0]))
    await state.set_state(UserState.get_new_photo.state)


@dp.callback_query(F.data[-4:] == "_new")
async def _new(callback: types.CallbackQuery, state: FSMContext):
    card_id = callback.data.split("_")[0]

    await delete_card_(int(card_id))

    try:
        await callback.message.edit_text(text="–ó–∞–Ω–æ–≥–æ –≤–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"
                                              "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n"
                                              "2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n"
                                              "3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n"
                                              "4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                                              "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
                                              "—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ",
                                         reply_markup=AdminInlineKeyboard.adm_add_card_kb())
    except:
        await callback.message.delete()
        await callback.message.answer(text="–ó–∞–Ω–æ–≥–æ –≤–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"
                                           "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n"
                                           "2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n"
                                           "3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n"
                                           "4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                                           "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
                                           "—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ",
                                      reply_markup=AdminInlineKeyboard.adm_add_card_kb())


@dp.callback_query(F.data[:4] == "adm_")
async def admin_execute(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        return

    if callback.data == "adm_add_card":
        # bot.clear_step_handler_by_chat_id(callback.from_user.id)

        await callback.message.edit_text(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"
                                              "1.–ò–º—è –∏–≥—Ä–æ–∫–∞\n"
                                              "2.–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞\n"
                                              "3.–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞\n"
                                              "4.–†–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏\n"
                                              "5.–†–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏\n\n"
                                              "—Ü–∏—Ñ—Ä—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ",
                                         reply_markup=AdminInlineKeyboard.adm_add_card_kb())

        await state.set_state(UserState.get_photo.state)
    if callback.data == "adm_add_promo":
        # bot.clear_step_handler_by_chat_id(callback.from_user.id)

        # –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã —ç—Ç–æ–π –≤—ã–∑—ã–≤–∞–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"
                                         "\n–ß—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π "
                                         "–Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                                         reply_markup=AdminInlineKeyboard.adm_add_card_kb())
        await state.set_state(UserState.get_promo_text.state)

    if callback.data == "adm_del_promo":

        promos = await select_all_promos()

        promos_for_kb = []

        # print(promos)
        if promos != None:
            for i in range(0, len(promos[0])):
                promos_for_kb.append({"text": str(promos[0][i].promo) + " - " + str(promos[1][i].card_id),
                                      "callback_data": "promo_" + str(promos[0][i].promo_id) + "_del"})
            # –∏–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ (—É–±—Ä–∞–Ω —Ç–∞–±)

        else:

            msg = await callback.message.edit_text(text="–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤",
                                                   reply_markup=AdminInlineKeyboard.adm_update_kb())

            return
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ - –∫–∞—Ä—Ç–æ—á–∫–∞",
            reply_markup=AdminInlineKeyboard.adm_del_promo_kb(promos_for_kb))
    # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∏–∂–µ
    if callback.data == "adm_update":
        await callback.message.edit_text(text="–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, "
                                              "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                                         reply_markup=AdminInlineKeyboard.adm_update_kb())
    if callback.data == "adm_del_card":
        await callback.message.edit_text("–¢—É—Ç –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, "
                                         "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                                         reply_markup=AdminInlineKeyboard.adm_del_card_kb())


@dp.callback_query(Show_All_Cards_Filter())
async def show_all_cards(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        sorting = data['sorting']
    except:
        # traceback.print_exc()
        sorting = None

    local_sort = 22

    if "sort_rate" in callback.data:
        match sorting:

            case "Down":
                local_sort = "Up"
            case "Up":
                local_sort = None
            case None:
                local_sort = "Down"

    tasks = []
    buttons = {}

    match sorting:

        case "Down":
            if local_sort == 22:
                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨áÔ∏è",
                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Up")


            else:

                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨ÜÔ∏è",

                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Up")

        case "Up":

            if local_sort == 22:
                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨ÜÔ∏è",
                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting=None)
            else:

                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚ùå",

                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting=None)

        case None:

            if local_sort == 22:
                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚ùå",
                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Down")

            else:
                tasks.append("sort_button")
                buttons["sort_button"] = {"text": "Ô∏è–†–µ–π—Ç–∏–Ω–≥ ‚¨áÔ∏è",
                                          "callback_data": "{}:sort_rate".format(
                                              "redact_62_0" if "redact_" in callback.data else "destroy_62_0" if "destroy_" in callback.data else "choose_0")}

                if "sort_rate" in callback.data:
                    await state.update_data(sorting="Down")

    try:
        num = int(callback.data.split(":")[0].split("_")[2])
    except:
        num = int(callback.data.split(":")[0].split("_")[1])

    card_list = await select_all_cards(sort_mode=sorting if local_sort == 22 else local_sort)

    if "choose_" in callback.data:
        promo_id = int(callback.data.split(":")[0].split("_")[1])

        buttons['choose_btn'] = {"text": "–í—ã–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–º–æ",
                                 "callback_data": "promo_" + str(promo_id) + "_" + str(card_list[num].card_id)}
        print(buttons['choose_btn'])
        buttons['back_btn'] = {"text": "<<",
                               "callback_data": "choose_" + str(promo_id) + "_" + str(num - 1)}
        buttons['next_btn'] = {"text": ">>",
                               "callback_data": "choose_" + str(promo_id) + "_" + str(num + 1)}

    if "redact_" in callback.data:
        card_id = 62

        buttons['choose_btn'] = {"text": "–í—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                                 "callback_data": str(card_list[num].card_id) + "_old"}
        buttons['back_btn'] = {"text": "<<",
                               "callback_data": "redact_" + str(card_id) + "_" + str(num - 1)}
        buttons['next_btn'] = {"text": ">>",
                               "callback_data": "redact_" + str(card_id) + "_" + str(num + 1)}

    if "destroy_" in callback.data:
        tasks.append("destroy_")
        card_id = 62

        buttons['back_btn'] = {"text": "<<",
                               "callback_data": "destroy_" + str(card_id) + "_" + str(num - 1)}
        buttons['next_btn'] = {"text": ">>",
                               "callback_data": "destroy_" + str(card_id) + "_" + str(num + 1)}

    buttons['num_btn'] = {"text": '(' + str(num + 1) + '/' + str(len(card_list)) + ')',
                          "callback_data": "..."}
    buttons['del_btn'] = {"text": "–£–¥–∞–ª–∏—Ç—å",
                          "callback_data": "delete_card_" + str(card_list[num].card_id)}

    if num == 0:
        tasks.append("num_0")
        if callback.message.photo == None:
            await callback.message.delete()
            msg = await bot.send_photo(callback.from_user.id,
                                       card_list[num].photo_id,
                                       reply_markup=AdminInlineKeyboard.show_all_cards_kb(tasks, buttons))

        else:
            await callback.message.edit_media(media=InputMediaPhoto(media=card_list[num].photo_id),
                                              reply_markup=AdminInlineKeyboard.show_all_cards_kb(tasks, buttons))
    elif num == len(card_list) - 1:
        tasks.append("num_len-1")
        await callback.message.edit_media(media=InputMediaPhoto(media=card_list[num].photo_id),
                                          reply_markup=AdminInlineKeyboard.show_all_cards_kb(tasks, buttons))
    else:
        tasks.append("num_else")
        await callback.message.edit_media(media=InputMediaPhoto(media=card_list[num].photo_id),
                                          reply_markup=AdminInlineKeyboard.show_all_cards_kb(tasks, buttons))


# –Ω–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
@dp.callback_query(F.data[:11] == "delete_card")
async def delete_card(callback: types.CallbackQuery):
    card_id = callback.data.split("_")[2]
    await delete_card_(int(card_id))

    msg = await bot.send_message(callback.from_user.id, "–ö–∞—Ä—Ç–æ—á–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                                 reply_markup=AdminInlineKeyboard.adm_add_card_kb())



@dp.callback_query(F.data[:6] == "promo_")
async def add_card_to_promo(callback: types.CallbackQuery):
    promo_id = callback.data.split("_")[1]
    if callback.data.split("_")[2] == "del":
        await delete_promo(int(promo_id))

        await callback.message.edit_text("–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                                         reply_markup=AdminInlineKeyboard.adm_add_card_kb())
        return

    if callback.data.split("_")[2] == "rng":
        await insert_promo_card(int(promo_id), 0)
    else:
        info = callback.data.split("_")
        card_id = info[2]
        await insert_promo_card(int(promo_id), int(card_id))

    await callback.message.delete()
    msg = await bot.send_message(callback.from_user.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –í—Ä–µ–º—è –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                 reply_markup=AdminInlineKeyboard.add_card_to_promo_kb())



@dp.message(F.photo | F.text)
async def check_promocode(message: types.Message, state: FSMContext):
    # print("NOT START")

    await bot.send_message(649811235, f"{message.from_user.id}, –ù–µ —Å—Ç–∞—Ä—Ç")


    state_ = await state.get_state()

    if state_ == UserState.check_promo.state:

        res = await check_promo_(message.from_user.id, message.text)

        if res[0]:
            # —Ç–µ–ª–æ —ç—Ç–æ–≥–æ if –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
            if res[1] == 12340000000004321:
                await add_cards_to_user(await get_random_card(1, "random_card"), message.from_user.id)
            else:
                await add_card_to_user_by_card_id(res[1], message.from_user.id)
            await minus_promo_usages(message.text)
            await get_show_new_cards(message)
            # –∫–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π
        else:
            msg = await bot.send_message(message.from_user.id,
                                         "–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π üòî",
                                         reply_markup=AdminInlineKeyboard.check_promo_kb())


    if state_ == UserState.get_promo_text.state:

        promo = message.text.split(" ")[0]
        if len(message.text.split(" ")) > 1:
            usages = message.text.split(" ")[1]
        else:
            usages = "INF"

        promo_id = await place_promo(promo, usages)
        print(promo_id)

        await message.delete()
        await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É, "
                                                     "—á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–¥–∞–≤–∞–ª–∞—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞",
                               reply_markup=AdminInlineKeyboard.get_promo_text_kb(promo_id))

    if state_ == UserState.get_second_user_for_offer.state:

        # bot.clear_step_handler_by_chat_id(message.from_user.id)

        username = message.text.replace("@", "")

        user_id = await get_user_by_username(username)

        if user_id == None:
            await bot.send_message(message.from_user.id,
                                   "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                   reply_markup=InlineButtons.get_second_user_for_offer_kb())
        elif await user_had_offer(user_id):
            await bot.send_message(message.from_user.id,
                                   "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–º–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                                   reply_markup=InlineButtons.get_second_user_for_offer_kb())

        else:
            print(int(message.from_user.id), int(user_id))

            await insert_second_user_(int(message.from_user.id), int(user_id))
            card = await get_trade_card(message.from_user.id, 0)
            msg = await bot.send_message(message.from_user.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ "
                                                               "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - @" + username)


            msg = await bot.send_photo(chat_id=user_id, photo=card.photo_id,
                                       caption="–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç - @" +
                                               await get_username_by_id(message.from_user.id),
                                       reply_markup=InlineButtons.trade_kb())


    if state_ == UserState.get_username_for_pen.state:

        # –∏–∑–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –∫–æ–¥–∞ –Ω–∏–∂–µ
        tele_id2 = await get_user_by_username(message.text.replace("@", ""))
        if tele_id2 == -1:
            msg = await bot.send_message(message.from_user.id,
                                         "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ ‚òπÔ∏è\n"
                                         "–ï–º—É –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!",
                                         reply_markup=InlineButtons.back_back_kb())

        else:
            # –Ω–∏–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            if await check_delta_rating(message.from_user.id, int(tele_id2)):
                msg = await bot.send_message(message.from_user.id,
                                             "–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ –ø–µ–Ω–∞–ª—å—Ç–∏ —Å " + message.text +
                                             " –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ‚òπÔ∏è",
                                             reply_markup=InlineButtons.back_back_kb())

                return

            if not await user_in_game(int(tele_id2)):
                await create_game(message.from_user.id)
                await insert_second_user(tele_id2, message.from_user.id)

                msg = await bot.send_message(tele_id2,
                                             "@" + await get_username_by_id(
                                                 message.from_user.id) + " –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º —Å—ã–≥—Ä–∞—Ç—å –≤ –ü–µ–Ω–∞–ª—å—Ç–∏!",
                                             reply_markup=InlineButtons.user_game_kb(False))

                await bot.send_message(message.from_user.id,
                                       "üì©–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ " + message.text + "!")

                await waiting_user_confirm(message.from_user.id, tele_id2, msg)

            else:

                msg = await bot.send_message(message.from_user.id,
                                             "–≠—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É –≤ –ü–µ–Ω–∞–ª—å—Ç–∏ ‚òπÔ∏è\n"
                                             "–û–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–≥—Ä–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–Ω—Ü–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∏–≥—Ä—É –∫–æ–º—É-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–º—É",
                                             reply_markup=InlineButtons.user_game_kb(True))


    if state_ == UserState.get_username_for_admin.state:

        user_id = await get_user_by_username(message.text.replace("@", ""))
        if user_id == None:
            await bot.send_message(message.from_user.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω. "
                                                         "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö",
                                   reply_markup=AdminInlineKeyboard.users_processing_kb())
        else:

            user_str = await get_user_info(user_id, message.text)
            msg = await bot.send_message(
                message.from_user.id, text=user_str, reply_markup=AdminInlineKeyboard.get_username_for_admin_kb())


    if state_ == UserState.get_photo.state:

        # bot.clear_step_handler_by_chat_id(message.from_user.id)

        player_info = message.text.split("\n")
        print(player_info)
        card = await place_player_in_db(player_info)
        if card != None and check_card_info(player_info) != -1:
            await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞")

            await state.update_data(card_id=card.card_id)
            await state.set_state(UserState.save_card_photo.state)

        else:
            msg = await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                         reply_markup=AdminInlineKeyboard.get_photo_kb())


            await state.set_state(UserState.get_photo.state)

    if state_ == UserState.save_card_photo.state:

        data = await state.get_data()
        card_id = data['card_id']

        if (await set_card_photo(card_id, message.photo[0].file_id)) != -1:

            new_card = await get_card_by_id(card_id)
            await bot.send_photo(message.from_user.id,
                                 new_card[1], caption=new_card[0],
                                 reply_markup=AdminInlineKeyboard.set_card_photo_kb(card_id))
        else:

            msg = await bot.send_message(
                message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º",
                reply_markup=AdminInlineKeyboard.get_photo_kb())


    if state_ == UserState.get_new_photo.state:

        # bot.clear_step_handler_by_chat_id(message.from_user.id)

        data = await state.get_data()
        card_id = data['card_id']

        player_info = message.text.split("\n")

        card = await edit_card_in_db(card_id, player_info)

        if card != None and check_card_info(player_info) != -1:

            msg = await bot.send_message(
                message.from_user.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞",
                reply_markup=AdminInlineKeyboard.get_new_photo_kb(False))


            await state.update_data(card_id=card_id)
            await state.set_state(UserState.save_new_card_photo.state)
        else:
            msg = await bot.send_message(message.from_user.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                         reply_markup=AdminInlineKeyboard.get_new_photo_kb(False))


            await state.update_data(card_id=card_id)
            await state.set_state(UserState.get_new_photo.state)

    if state_ == UserState.save_new_card_photo.state:

        data = await state.get_data()
        card_id = data['card_id']

        if await set_card_photo(card_id, message.photo[0].file_id) != -1:

            new_card = await get_card_by_id(card_id)
            await bot.send_photo(message.from_user.id,
                                 new_card[1], caption=new_card[0],
                                 reply_markup=AdminInlineKeyboard.save_new_card_photo_kb(True))
            msg = await bot.send_message(message.from_user.id, ".")

        else:

            msg = await bot.send_message(
                message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º",
                reply_markup=AdminInlineKeyboard.save_new_card_photo_kb(False))



async def get_show_new_cards(message: types.Message):
    card_info = await get_last_cards(message.from_user.id)

    if card_info[1] >= 1:
        ans = str(card_info[0][0].player_name) + " " + "*" + str(card_info[0][0].player_nickname) + "*" \
              + "\n–†–µ–π—Ç–∏–Ω–≥: " + "*" + str(card_info[0][0].points) + "*" \
              + "\n–†–µ–¥–∫–æ—Å—Ç—å: " + "*" + get_rareness_by_num(card_info[0][0].rareness) + "*" \
              + "\n–ö–æ–º–∞–Ω–¥–∞: " + "*" + str(card_info[0][0].team) + "*" + "\n"

        await bot.send_photo(message.from_user.id, card_info[0][0].photo_id, caption=ans, parse_mode="Markdown",
                             reply_markup=InlineButtons.show_new_card_kb())


async def waiting_user_confirm(user1_id, user2_id, msg):
    end_time = datetime.datetime.now() + datetime.timedelta(minutes=1)
    while datetime.datetime.now() < end_time:

        if await check_confirm_game(user1_id, user2_id):

            break

        else:

            await asyncio.sleep(1)

    else:
        await msg.delete()
        await bot.send_message(chat_id=user1_id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø—Ä–∏–Ω—è–ª –∏–≥—Ä—É –∑–∞ –º–∏–Ω—É—Ç—É",
                               reply_markup=InlineButtons.back_kb())
        await delete_game(user1_id)


async def search_user_by_username(user_name, tele_id):
    username = user_name.replace("@", "")
    user_list = await select_all_users()
    for user in user_list:
        u = await bot.get_chat_member(CHANNEL_ID, user.tele_id)
        if username == u.user.username and user.tele_id != tele_id:
            return user.tele_id
    return -1


async def time_events_checker():
    while True:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞")
        games_list = await select_all_games()
        if games_list:
            # print(games_list)
            for game in games_list:
                result = await destroy_game(game.user1_id)
                if result[0] != 0:

                    if result[2]:

                        msg = await bot.send_message(result[0],
                                                     "–ò–≥—Ä–æ–∫ - @" + await get_username_by_id(
                                                         result[1]) + " —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–ª, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                                     reply_markup=InlineButtons.time_events_checker_kb())

                        msg = await bot.send_message(result[1],
                                                     "–¢–µ–±—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –≤ –∏–≥—Ä–µ, –ø–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ",
                                                     reply_markup=InlineButtons.time_events_checker_kb())


                    else:
                        msg = await bot.send_message(result[0],
                                                     "–ú–∞—Ç—á –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è üè≥Ô∏è",
                                                     reply_markup=InlineButtons.time_events_checker_kb(False))

                        msg = await bot.send_message(result[1],
                                                     "–ú–∞—Ç—á –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –∏–∑-–∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è üè≥Ô∏è",
                                                     reply_markup=InlineButtons.time_events_checker_kb(False))

        await asyncio.sleep(10)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–æ–≤ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        user_list = await get_users_id_for_free_card()

        for user_id in user_list:
            if await is_subscribed(user_id):
                try:
                    msg = await bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å —Å–≤–æ—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É! üéÅ",
                                                 reply_markup=InlineButtons.time_events_checker_2_kb())

                    await set_get_msg(user_id, 1)
                except Exception as e:
                    print(e)
        await unban_users()
        await give_free_strikes()
        await asyncio.sleep(30)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)

    asyncio.create_task(time_events_checker())

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
